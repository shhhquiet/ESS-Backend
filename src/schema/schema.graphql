# import * from '../generated/prisma.graphql'

type Mutation {
	clientSignup(data: ClientCreateInput!): Client!
	clientSignin(email: String!, password: String!): Client!
	employeeSignup(data: EmployeeCreateInput!): Employee!
	signin(email: String!, password: String!): User!
	employeeSignin(email: String!, password: String!): Employee!
	requestReset(email: String!, role: String!): String
	resetPassword(
		resetToken: String!
		password: String!
		confirmPassword: String!
		role: String!
	): User!
	internalPasswordReset(
		oldPassword: String!
		newPassword1: String!
		newPassword2: String!
		role: String!
	): User!
	signout: SuccessMessage!
	createMessage(text: String!, title: String!): Message!
	createLesson(data: LessonCreateInput!): Lesson!
	bookLesson(lessonId: ID!, studentId: ID!): Lesson!
	createClass(classInfo: ClassCreateInput!): Class!
	bookClass(classId: ID!, studentId: ID!): Class!
	createAgeGroup(groupDetails: AgeGroupCreateInput!): AgeGroup!
	createStudent(studentInfo: StudentCreateInput!): Client
	addMedical(medicalInfo: MedicalConditionCreateInput!): Student!
	cancelLesson(lessonId: ID!, studentId: ID!): SuccessMessage!
}

type Query {
	employees: [Employee]
	users: [User]
	currentUser: User
	lessons: [Lesson]
	classes: [Class]
	fullSchedule: ClassesAndLessons
	instructorLessons: [Lesson]
	instructorClasses: [Class]
	studentMedical: [MedicalCondition]
}

type SuccessMessage {
	message: String!
}

type ClassesAndLessons {
	lessons: [Lesson]
	classes: [Class]
}

type Employee {
	id: ID!
	email: String!
	password: String!
	phone: String!
	firstName: String!
	lastName: String!
	gender: Gender!
	address: String!
	city: String!
	state: String!
	zip: Int!
	bio: String!
	role: [Role]
	imageURL: String!
	startDate: DateTime!
	currentEmployee: Boolean!
	clients: [Student]
	classes: [Class]
	lessons: [Lesson]
	lessonSinglePrice: Int
	lessonDoublePrice: Int
	createdMessages: [Message]
	taggedMessages: [Message]
	createdAt: DateTime!
	updatedAt: DateTime!
}

type Message {
	id: ID!
	title: String!
	text: String!
	author: Employee! 
	parent: Message 
	taggedEmployees: [Employee]! 
	tags: [MessageTag]!
	comments: [Message]! 
	createdAt: DateTime!
	updatedAt: DateTime! 
}

type MessageTag {
	id: ID! 
	tag: String!
	messages: [Message]!
}


type MedicalCondition {
	id: ID!
	description: String!
	student: Student
	createdAt: DateTime!
	updatedAt: DateTime!
}

type Class {
	id: ID!
	name: String
	description: String!
	ageGroup: AgeGroup!
	level: SkillLevel!
	capacity: Int!
	price: Int!
	day: Day!
	instructor: Employee!
	duration: Int! # 30 45 or 60 min
	students: [Student]!
	time: DateTime!
	createdAt: DateTime!
	updatedAt: DateTime!
}

type Lesson {
	id: ID!
	instructor: Employee!
	client: [Student]
	duration: Int!
	type: LessonType
	day: Day!
	time: String!
	open: Boolean!
}

type AgeGroup {
	id: ID!
	name: String!
	minAge: Int!
	maxAge: Int
	createdAt: DateTime!
	updatedAt: DateTime!
}

type Student {
	id: ID!
	firstName: String!
	lastName: String!
	birthday: String!
	skill: SkillLevel!
	ageGroup: AgeGroup!
	classes: [Class!]!
	lessons: [Lesson!]!
	gender: Gender!
	admin: Client
	medical: [MedicalCondition]
	createdAt: DateTime!
	updatedAt: DateTime!
}

type Client {
	id: ID!
	email: String!
	password: String!
	firstName: String!
	lastName: String!
	phone: String!
	address: String!
	city: String!
	state: String!
	zip: Int!
	students: [Student!]!
	stripeId: String
	resetToken: String
	resetTokenExpiry: String
	createdAt: DateTime!
	updatedAt: DateTime!
}

union User = Client | Student | Employee
union Customer = Client | Student # makes it so we can find Parents/Children in one single query
union Instruction = Lesson | Class #
