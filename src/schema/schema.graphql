# import * from '../generated/prisma.graphql'

type Mutation {
  signup(email: String!, password: String!, firstName: String!, lastName: String!): User!
	signin(email: String!, password: String!): User!
	requestReset(email: String!): Message
	resetPassword(resetToken: String!, password: String!, confirmPassword: String!): User!
	internalPasswordReset(oldPassword: String!, newPassword1: String!, newPassword2: String!): User!
	signout: Message

}

type Query {
  instructors: Instructor
}


type Instructor {
	id: ID! @id
	email: String! @unique
	password: String!
	phone: String! @unique
	firstName: String!
	lastName: String!
	gender: Gender!
	address: String!
	city: String!
	state: String!
	zip: Int!
	bio: String!
	role: Role!
	imageURL: String!
	startDate: DateTime!
	currentEmployee: Boolean!
	clients: [Student!]!
	classes: [Class]
	lessons: [Lesson]
	createdAt: DateTime! @createdAt
	updatedAt: DateTime! @updatedAt
}

type MedicalCondition {
  id: ID! @unique
  description: String!
  student: [Student] @relation(type: "StudentMedical")
  # instructor: [Instructor] @relation(type: "InstructorMedical")
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Class {
  id: ID! @unique
  name: String!
  description: String!
  ageGroup: AgeGroup!
  level: SkillLevel!
  capacity: Int!
  price: Int!
  day: Day!
  instructor: Instructor! # can there be multiple instructors for a class?
  duration: Int! # 30 45 or 60 min
  students: [Student!]!
  time: DateTime! # may want to make this one be a string, not sure
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Lesson {
  id: ID! @unique
  name: String!
  description: String!
  instructor: Instructor! 
  duration: Int!
  calendarColor: Color!
  price: Int!
  day: Day!
  time: DateTime!
  open: Boolean!
}

type AgeGroup {
  id: ID! 
  minAge: Int!
  maxAge: Int!
  level: SkillLevel
  instructors: [Instructor!]! #assuming there are multiple instructors per age group
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Student {
	id: ID! @id
	firstName: String!
	lastName: String!
	birthday: String!
	skill: SkillLevel!
	ageGroup: AgeGroup!
	classes: [Class!]!
	lessons: [Lesson!]!
	gender: Gender!
	medical: [MedicalCondition!]! # generic medical can be used for multiple students?
	admin: AccountAdmin @relation(link: INLINE)
	createdAt: DateTime! @createdAt
	updatedAt: DateTime! @updatedAt
}

type AccountAdmin { # for parents since they'll have control over payments, etc.
	id: ID! @id
	email: String! @unique
	password: String!
	firstName: String!
	lastName: String!
	phone: String!
	address: String!
	city: String!
	state: String!
	zip: Int!
	students: [Student!]!
	stripeId: String # if we use stripe for charges
	resetToken: String
	resetTokenExpiry: String
	createdAt: DateTime! @createdAt
	updatedAt: DateTime! @updatedAt
}
