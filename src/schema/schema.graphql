# import * from '../generated/prisma.graphql'

type Mutation {
  signup(email: String!, password: String!, firstName: String!, lastName: String!): User!
	signin(email: String!, password: String!): User!
	requestReset(email: String!): String
	resetPassword(resetToken: String!, password: String!, confirmPassword: String!): User!
	internalPasswordReset(oldPassword: String!, newPassword1: String!, newPassword2: String!): User!
	signout: String

}

type Query {
  employees: [Employee]
  users: [User]
  currentUser: User
}


type Employee {
	id: ID! 
	email: String! 
	password: String!
	phone: String!
	firstName: String!
	lastName: String!
	gender: Gender!
	address: String!
	city: String!
	state: String!
	zip: Int!
	bio: String!
	role: [Role]
	imageURL: String!
	startDate: DateTime!
	currentEmployee: Boolean!
	clients: [Student!]!
	classes: [Class!]!
	lessons: [Lesson!]!
	createdAt: DateTime! 
	updatedAt: DateTime! 
}


type MedicalCondition {
  id: ID! 
  description: String!
  student: [Student] 
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Class {
  id: ID! 
  name: String!
  description: String!
  ageGroup: AgeGroup!
  level: SkillLevel!
  capacity: Int!
  price: Int!
  day: Day!
  instructor: Employee! # can there be multiple instructors for a class?
  duration: Int! # 30 45 or 60 min
  students: [Student!]!
  time: DateTime! # may want to make this one be a string, not sure
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Lesson {
  id: ID! 
  name: String!
  description: String!
  instructor: Employee! 
  duration: Int!
  calendarColor: Color!
  price: Int!
  day: Day!
  time: DateTime!
  open: Boolean!
}

type AgeGroup {
  id: ID! 
  minAge: Int!
  maxAge: Int!
  level: SkillLevel
  instructors: [Employee!]! #assuming there are multiple instructors per age group
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Student {
  id: ID! 
  firstName: String!
  lastName: String!
  birthday: String!
  skill: SkillLevel!
  ageGroup: AgeGroup!
  classes: [Class!]!
  lessons: [Lesson!]!
  gender: Gender!
  medical: [MedicalCondition!]! # if we have generic med conditions we can use them for multiple students
  createdAt: DateTime!
  updatedAt: DateTime!
}

type AccountAdmin { # for parents since they'll have control over payments, etc.
	id: ID! 
	email: String! 
	password: String!
	firstName: String!
	lastName: String!
	phone: String!
	address: String!
	city: String!
	state: String!
	zip: Int!
	students: [Student!]!
	stripeId: String # if we use stripe for charges
	resetToken: String
	resetTokenExpiry: String
	createdAt: DateTime! 
	updatedAt: DateTime! 
}

union User = AccountAdmin | Student | Employee
union Customer = AccountAdmin | Student # makes it so we can find Parents/Children in one single query
union Instruction = Lesson | Class #
