# source: https://eastsideswim-16e1c20ddd.herokuapp.com/eastsideswim/dev
# timestamp: Tue Jun 18 2019 23:14:19 GMT-0700 (Pacific Daylight Time)

type AgeGroup implements Node {
  id: ID!
  name: String!
  minAge: Int!
  maxAge: Int
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type AgeGroupConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [AgeGroupEdge]!
  aggregate: AggregateAgeGroup!
}

input AgeGroupCreateInput {
  id: ID
  name: String!
  minAge: Int!
  maxAge: Int
}

input AgeGroupCreateOneInput {
  create: AgeGroupCreateInput
  connect: AgeGroupWhereUniqueInput
}

"""An edge in a connection."""
type AgeGroupEdge {
  """The item at the end of the edge."""
  node: AgeGroup!

  """A cursor for use in pagination."""
  cursor: String!
}

enum AgeGroupOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  minAge_ASC
  minAge_DESC
  maxAge_ASC
  maxAge_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type AgeGroupPreviousValues {
  id: ID!
  name: String!
  minAge: Int!
  maxAge: Int
  createdAt: DateTime!
  updatedAt: DateTime!
}

type AgeGroupSubscriptionPayload {
  mutation: MutationType!
  node: AgeGroup
  updatedFields: [String!]
  previousValues: AgeGroupPreviousValues
}

input AgeGroupSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [AgeGroupSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [AgeGroupSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AgeGroupSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: AgeGroupWhereInput
}

input AgeGroupUpdateDataInput {
  name: String
  minAge: Int
  maxAge: Int
}

input AgeGroupUpdateInput {
  name: String
  minAge: Int
  maxAge: Int
}

input AgeGroupUpdateManyMutationInput {
  name: String
  minAge: Int
  maxAge: Int
}

input AgeGroupUpdateOneRequiredInput {
  create: AgeGroupCreateInput
  connect: AgeGroupWhereUniqueInput
  update: AgeGroupUpdateDataInput
  upsert: AgeGroupUpsertNestedInput
}

input AgeGroupUpsertNestedInput {
  update: AgeGroupUpdateDataInput!
  create: AgeGroupCreateInput!
}

input AgeGroupWhereInput {
  """Logical AND on all given filters."""
  AND: [AgeGroupWhereInput!]

  """Logical OR on all given filters."""
  OR: [AgeGroupWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AgeGroupWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  minAge: Int

  """All values that are not equal to given value."""
  minAge_not: Int

  """All values that are contained in given list."""
  minAge_in: [Int!]

  """All values that are not contained in given list."""
  minAge_not_in: [Int!]

  """All values less than the given value."""
  minAge_lt: Int

  """All values less than or equal the given value."""
  minAge_lte: Int

  """All values greater than the given value."""
  minAge_gt: Int

  """All values greater than or equal the given value."""
  minAge_gte: Int
  maxAge: Int

  """All values that are not equal to given value."""
  maxAge_not: Int

  """All values that are contained in given list."""
  maxAge_in: [Int!]

  """All values that are not contained in given list."""
  maxAge_not_in: [Int!]

  """All values less than the given value."""
  maxAge_lt: Int

  """All values less than or equal the given value."""
  maxAge_lte: Int

  """All values greater than the given value."""
  maxAge_gt: Int

  """All values greater than or equal the given value."""
  maxAge_gte: Int
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

input AgeGroupWhereUniqueInput {
  id: ID
}

type AggregateAgeGroup {
  count: Int!
}

type AggregateClass {
  count: Int!
}

type AggregateClient {
  count: Int!
}

type AggregateEmployee {
  count: Int!
}

type AggregateLesson {
  count: Int!
}

type AggregateMedicalCondition {
  count: Int!
}

type AggregateMessage {
  count: Int!
}

type AggregateMessageTag {
  count: Int!
}

type AggregateStudent {
  count: Int!
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

type Class implements Node {
  id: ID!
  name: String
  description: String!
  ageGroup: AgeGroup!
  level: SkillLevel!
  capacity: Int!
  price: Int!
  day: Day!
  instructor: Employee!
  duration: Int!
  students(where: StudentWhereInput, orderBy: StudentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Student!]
  time: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type ClassConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ClassEdge]!
  aggregate: AggregateClass!
}

input ClassCreateInput {
  id: ID
  name: String
  description: String!
  level: SkillLevel!
  capacity: Int!
  price: Int!
  day: Day!
  duration: Int!
  time: String!
  ageGroup: AgeGroupCreateOneInput!
  instructor: EmployeeCreateOneWithoutClassesInput!
  students: StudentCreateManyWithoutClassesInput
}

input ClassCreateManyWithoutInstructorInput {
  create: [ClassCreateWithoutInstructorInput!]
  connect: [ClassWhereUniqueInput!]
}

input ClassCreateManyWithoutStudentsInput {
  create: [ClassCreateWithoutStudentsInput!]
  connect: [ClassWhereUniqueInput!]
}

input ClassCreateWithoutInstructorInput {
  id: ID
  name: String
  description: String!
  level: SkillLevel!
  capacity: Int!
  price: Int!
  day: Day!
  duration: Int!
  time: String!
  ageGroup: AgeGroupCreateOneInput!
  students: StudentCreateManyWithoutClassesInput
}

input ClassCreateWithoutStudentsInput {
  id: ID
  name: String
  description: String!
  level: SkillLevel!
  capacity: Int!
  price: Int!
  day: Day!
  duration: Int!
  time: String!
  ageGroup: AgeGroupCreateOneInput!
  instructor: EmployeeCreateOneWithoutClassesInput!
}

"""An edge in a connection."""
type ClassEdge {
  """The item at the end of the edge."""
  node: Class!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ClassOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
  level_ASC
  level_DESC
  capacity_ASC
  capacity_DESC
  price_ASC
  price_DESC
  day_ASC
  day_DESC
  duration_ASC
  duration_DESC
  time_ASC
  time_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ClassPreviousValues {
  id: ID!
  name: String
  description: String!
  level: SkillLevel!
  capacity: Int!
  price: Int!
  day: Day!
  duration: Int!
  time: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input ClassScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [ClassScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [ClassScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ClassScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  level: SkillLevel

  """All values that are not equal to given value."""
  level_not: SkillLevel

  """All values that are contained in given list."""
  level_in: [SkillLevel!]

  """All values that are not contained in given list."""
  level_not_in: [SkillLevel!]
  capacity: Int

  """All values that are not equal to given value."""
  capacity_not: Int

  """All values that are contained in given list."""
  capacity_in: [Int!]

  """All values that are not contained in given list."""
  capacity_not_in: [Int!]

  """All values less than the given value."""
  capacity_lt: Int

  """All values less than or equal the given value."""
  capacity_lte: Int

  """All values greater than the given value."""
  capacity_gt: Int

  """All values greater than or equal the given value."""
  capacity_gte: Int
  price: Int

  """All values that are not equal to given value."""
  price_not: Int

  """All values that are contained in given list."""
  price_in: [Int!]

  """All values that are not contained in given list."""
  price_not_in: [Int!]

  """All values less than the given value."""
  price_lt: Int

  """All values less than or equal the given value."""
  price_lte: Int

  """All values greater than the given value."""
  price_gt: Int

  """All values greater than or equal the given value."""
  price_gte: Int
  day: Day

  """All values that are not equal to given value."""
  day_not: Day

  """All values that are contained in given list."""
  day_in: [Day!]

  """All values that are not contained in given list."""
  day_not_in: [Day!]
  duration: Int

  """All values that are not equal to given value."""
  duration_not: Int

  """All values that are contained in given list."""
  duration_in: [Int!]

  """All values that are not contained in given list."""
  duration_not_in: [Int!]

  """All values less than the given value."""
  duration_lt: Int

  """All values less than or equal the given value."""
  duration_lte: Int

  """All values greater than the given value."""
  duration_gt: Int

  """All values greater than or equal the given value."""
  duration_gte: Int
  time: String

  """All values that are not equal to given value."""
  time_not: String

  """All values that are contained in given list."""
  time_in: [String!]

  """All values that are not contained in given list."""
  time_not_in: [String!]

  """All values less than the given value."""
  time_lt: String

  """All values less than or equal the given value."""
  time_lte: String

  """All values greater than the given value."""
  time_gt: String

  """All values greater than or equal the given value."""
  time_gte: String

  """All values containing the given string."""
  time_contains: String

  """All values not containing the given string."""
  time_not_contains: String

  """All values starting with the given string."""
  time_starts_with: String

  """All values not starting with the given string."""
  time_not_starts_with: String

  """All values ending with the given string."""
  time_ends_with: String

  """All values not ending with the given string."""
  time_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

type ClassSubscriptionPayload {
  mutation: MutationType!
  node: Class
  updatedFields: [String!]
  previousValues: ClassPreviousValues
}

input ClassSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ClassSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ClassSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ClassSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ClassWhereInput
}

input ClassUpdateInput {
  name: String
  description: String
  level: SkillLevel
  capacity: Int
  price: Int
  day: Day
  duration: Int
  time: String
  ageGroup: AgeGroupUpdateOneRequiredInput
  instructor: EmployeeUpdateOneRequiredWithoutClassesInput
  students: StudentUpdateManyWithoutClassesInput
}

input ClassUpdateManyDataInput {
  name: String
  description: String
  level: SkillLevel
  capacity: Int
  price: Int
  day: Day
  duration: Int
  time: String
}

input ClassUpdateManyMutationInput {
  name: String
  description: String
  level: SkillLevel
  capacity: Int
  price: Int
  day: Day
  duration: Int
  time: String
}

input ClassUpdateManyWithoutInstructorInput {
  create: [ClassCreateWithoutInstructorInput!]
  connect: [ClassWhereUniqueInput!]
  set: [ClassWhereUniqueInput!]
  disconnect: [ClassWhereUniqueInput!]
  delete: [ClassWhereUniqueInput!]
  update: [ClassUpdateWithWhereUniqueWithoutInstructorInput!]
  updateMany: [ClassUpdateManyWithWhereNestedInput!]
  deleteMany: [ClassScalarWhereInput!]
  upsert: [ClassUpsertWithWhereUniqueWithoutInstructorInput!]
}

input ClassUpdateManyWithoutStudentsInput {
  create: [ClassCreateWithoutStudentsInput!]
  connect: [ClassWhereUniqueInput!]
  set: [ClassWhereUniqueInput!]
  disconnect: [ClassWhereUniqueInput!]
  delete: [ClassWhereUniqueInput!]
  update: [ClassUpdateWithWhereUniqueWithoutStudentsInput!]
  updateMany: [ClassUpdateManyWithWhereNestedInput!]
  deleteMany: [ClassScalarWhereInput!]
  upsert: [ClassUpsertWithWhereUniqueWithoutStudentsInput!]
}

input ClassUpdateManyWithWhereNestedInput {
  where: ClassScalarWhereInput!
  data: ClassUpdateManyDataInput!
}

input ClassUpdateWithoutInstructorDataInput {
  name: String
  description: String
  level: SkillLevel
  capacity: Int
  price: Int
  day: Day
  duration: Int
  time: String
  ageGroup: AgeGroupUpdateOneRequiredInput
  students: StudentUpdateManyWithoutClassesInput
}

input ClassUpdateWithoutStudentsDataInput {
  name: String
  description: String
  level: SkillLevel
  capacity: Int
  price: Int
  day: Day
  duration: Int
  time: String
  ageGroup: AgeGroupUpdateOneRequiredInput
  instructor: EmployeeUpdateOneRequiredWithoutClassesInput
}

input ClassUpdateWithWhereUniqueWithoutInstructorInput {
  where: ClassWhereUniqueInput!
  data: ClassUpdateWithoutInstructorDataInput!
}

input ClassUpdateWithWhereUniqueWithoutStudentsInput {
  where: ClassWhereUniqueInput!
  data: ClassUpdateWithoutStudentsDataInput!
}

input ClassUpsertWithWhereUniqueWithoutInstructorInput {
  where: ClassWhereUniqueInput!
  update: ClassUpdateWithoutInstructorDataInput!
  create: ClassCreateWithoutInstructorInput!
}

input ClassUpsertWithWhereUniqueWithoutStudentsInput {
  where: ClassWhereUniqueInput!
  update: ClassUpdateWithoutStudentsDataInput!
  create: ClassCreateWithoutStudentsInput!
}

input ClassWhereInput {
  """Logical AND on all given filters."""
  AND: [ClassWhereInput!]

  """Logical OR on all given filters."""
  OR: [ClassWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ClassWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  level: SkillLevel

  """All values that are not equal to given value."""
  level_not: SkillLevel

  """All values that are contained in given list."""
  level_in: [SkillLevel!]

  """All values that are not contained in given list."""
  level_not_in: [SkillLevel!]
  capacity: Int

  """All values that are not equal to given value."""
  capacity_not: Int

  """All values that are contained in given list."""
  capacity_in: [Int!]

  """All values that are not contained in given list."""
  capacity_not_in: [Int!]

  """All values less than the given value."""
  capacity_lt: Int

  """All values less than or equal the given value."""
  capacity_lte: Int

  """All values greater than the given value."""
  capacity_gt: Int

  """All values greater than or equal the given value."""
  capacity_gte: Int
  price: Int

  """All values that are not equal to given value."""
  price_not: Int

  """All values that are contained in given list."""
  price_in: [Int!]

  """All values that are not contained in given list."""
  price_not_in: [Int!]

  """All values less than the given value."""
  price_lt: Int

  """All values less than or equal the given value."""
  price_lte: Int

  """All values greater than the given value."""
  price_gt: Int

  """All values greater than or equal the given value."""
  price_gte: Int
  day: Day

  """All values that are not equal to given value."""
  day_not: Day

  """All values that are contained in given list."""
  day_in: [Day!]

  """All values that are not contained in given list."""
  day_not_in: [Day!]
  duration: Int

  """All values that are not equal to given value."""
  duration_not: Int

  """All values that are contained in given list."""
  duration_in: [Int!]

  """All values that are not contained in given list."""
  duration_not_in: [Int!]

  """All values less than the given value."""
  duration_lt: Int

  """All values less than or equal the given value."""
  duration_lte: Int

  """All values greater than the given value."""
  duration_gt: Int

  """All values greater than or equal the given value."""
  duration_gte: Int
  time: String

  """All values that are not equal to given value."""
  time_not: String

  """All values that are contained in given list."""
  time_in: [String!]

  """All values that are not contained in given list."""
  time_not_in: [String!]

  """All values less than the given value."""
  time_lt: String

  """All values less than or equal the given value."""
  time_lte: String

  """All values greater than the given value."""
  time_gt: String

  """All values greater than or equal the given value."""
  time_gte: String

  """All values containing the given string."""
  time_contains: String

  """All values not containing the given string."""
  time_not_contains: String

  """All values starting with the given string."""
  time_starts_with: String

  """All values not starting with the given string."""
  time_not_starts_with: String

  """All values ending with the given string."""
  time_ends_with: String

  """All values not ending with the given string."""
  time_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  ageGroup: AgeGroupWhereInput
  instructor: EmployeeWhereInput
  students_every: StudentWhereInput
  students_some: StudentWhereInput
  students_none: StudentWhereInput
}

input ClassWhereUniqueInput {
  id: ID
}

type Client implements Node {
  id: ID!
  email: String!
  password: String!
  firstName: String!
  lastName: String!
  phone: String!
  address: String!
  city: String!
  state: String!
  zip: Int!
  students(where: StudentWhereInput, orderBy: StudentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Student!]
  stripeId: String
  resetToken: String
  resetTokenExpiry: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type ClientConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ClientEdge]!
  aggregate: AggregateClient!
}

input ClientCreateInput {
  id: ID
  email: String!
  password: String!
  firstName: String!
  lastName: String!
  phone: String!
  address: String!
  city: String!
  state: String!
  zip: Int!
  stripeId: String
  resetToken: String
  resetTokenExpiry: String
  students: StudentCreateManyWithoutAdminInput
}

input ClientCreateOneWithoutStudentsInput {
  create: ClientCreateWithoutStudentsInput
  connect: ClientWhereUniqueInput
}

input ClientCreateWithoutStudentsInput {
  id: ID
  email: String!
  password: String!
  firstName: String!
  lastName: String!
  phone: String!
  address: String!
  city: String!
  state: String!
  zip: Int!
  stripeId: String
  resetToken: String
  resetTokenExpiry: String
}

"""An edge in a connection."""
type ClientEdge {
  """The item at the end of the edge."""
  node: Client!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ClientOrderByInput {
  id_ASC
  id_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  firstName_ASC
  firstName_DESC
  lastName_ASC
  lastName_DESC
  phone_ASC
  phone_DESC
  address_ASC
  address_DESC
  city_ASC
  city_DESC
  state_ASC
  state_DESC
  zip_ASC
  zip_DESC
  stripeId_ASC
  stripeId_DESC
  resetToken_ASC
  resetToken_DESC
  resetTokenExpiry_ASC
  resetTokenExpiry_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ClientPreviousValues {
  id: ID!
  email: String!
  password: String!
  firstName: String!
  lastName: String!
  phone: String!
  address: String!
  city: String!
  state: String!
  zip: Int!
  stripeId: String
  resetToken: String
  resetTokenExpiry: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

type ClientSubscriptionPayload {
  mutation: MutationType!
  node: Client
  updatedFields: [String!]
  previousValues: ClientPreviousValues
}

input ClientSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ClientSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ClientSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ClientSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ClientWhereInput
}

input ClientUpdateInput {
  email: String
  password: String
  firstName: String
  lastName: String
  phone: String
  address: String
  city: String
  state: String
  zip: Int
  stripeId: String
  resetToken: String
  resetTokenExpiry: String
  students: StudentUpdateManyWithoutAdminInput
}

input ClientUpdateManyMutationInput {
  email: String
  password: String
  firstName: String
  lastName: String
  phone: String
  address: String
  city: String
  state: String
  zip: Int
  stripeId: String
  resetToken: String
  resetTokenExpiry: String
}

input ClientUpdateOneWithoutStudentsInput {
  create: ClientCreateWithoutStudentsInput
  connect: ClientWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: ClientUpdateWithoutStudentsDataInput
  upsert: ClientUpsertWithoutStudentsInput
}

input ClientUpdateWithoutStudentsDataInput {
  email: String
  password: String
  firstName: String
  lastName: String
  phone: String
  address: String
  city: String
  state: String
  zip: Int
  stripeId: String
  resetToken: String
  resetTokenExpiry: String
}

input ClientUpsertWithoutStudentsInput {
  update: ClientUpdateWithoutStudentsDataInput!
  create: ClientCreateWithoutStudentsInput!
}

input ClientWhereInput {
  """Logical AND on all given filters."""
  AND: [ClientWhereInput!]

  """Logical OR on all given filters."""
  OR: [ClientWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ClientWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  password: String

  """All values that are not equal to given value."""
  password_not: String

  """All values that are contained in given list."""
  password_in: [String!]

  """All values that are not contained in given list."""
  password_not_in: [String!]

  """All values less than the given value."""
  password_lt: String

  """All values less than or equal the given value."""
  password_lte: String

  """All values greater than the given value."""
  password_gt: String

  """All values greater than or equal the given value."""
  password_gte: String

  """All values containing the given string."""
  password_contains: String

  """All values not containing the given string."""
  password_not_contains: String

  """All values starting with the given string."""
  password_starts_with: String

  """All values not starting with the given string."""
  password_not_starts_with: String

  """All values ending with the given string."""
  password_ends_with: String

  """All values not ending with the given string."""
  password_not_ends_with: String
  firstName: String

  """All values that are not equal to given value."""
  firstName_not: String

  """All values that are contained in given list."""
  firstName_in: [String!]

  """All values that are not contained in given list."""
  firstName_not_in: [String!]

  """All values less than the given value."""
  firstName_lt: String

  """All values less than or equal the given value."""
  firstName_lte: String

  """All values greater than the given value."""
  firstName_gt: String

  """All values greater than or equal the given value."""
  firstName_gte: String

  """All values containing the given string."""
  firstName_contains: String

  """All values not containing the given string."""
  firstName_not_contains: String

  """All values starting with the given string."""
  firstName_starts_with: String

  """All values not starting with the given string."""
  firstName_not_starts_with: String

  """All values ending with the given string."""
  firstName_ends_with: String

  """All values not ending with the given string."""
  firstName_not_ends_with: String
  lastName: String

  """All values that are not equal to given value."""
  lastName_not: String

  """All values that are contained in given list."""
  lastName_in: [String!]

  """All values that are not contained in given list."""
  lastName_not_in: [String!]

  """All values less than the given value."""
  lastName_lt: String

  """All values less than or equal the given value."""
  lastName_lte: String

  """All values greater than the given value."""
  lastName_gt: String

  """All values greater than or equal the given value."""
  lastName_gte: String

  """All values containing the given string."""
  lastName_contains: String

  """All values not containing the given string."""
  lastName_not_contains: String

  """All values starting with the given string."""
  lastName_starts_with: String

  """All values not starting with the given string."""
  lastName_not_starts_with: String

  """All values ending with the given string."""
  lastName_ends_with: String

  """All values not ending with the given string."""
  lastName_not_ends_with: String
  phone: String

  """All values that are not equal to given value."""
  phone_not: String

  """All values that are contained in given list."""
  phone_in: [String!]

  """All values that are not contained in given list."""
  phone_not_in: [String!]

  """All values less than the given value."""
  phone_lt: String

  """All values less than or equal the given value."""
  phone_lte: String

  """All values greater than the given value."""
  phone_gt: String

  """All values greater than or equal the given value."""
  phone_gte: String

  """All values containing the given string."""
  phone_contains: String

  """All values not containing the given string."""
  phone_not_contains: String

  """All values starting with the given string."""
  phone_starts_with: String

  """All values not starting with the given string."""
  phone_not_starts_with: String

  """All values ending with the given string."""
  phone_ends_with: String

  """All values not ending with the given string."""
  phone_not_ends_with: String
  address: String

  """All values that are not equal to given value."""
  address_not: String

  """All values that are contained in given list."""
  address_in: [String!]

  """All values that are not contained in given list."""
  address_not_in: [String!]

  """All values less than the given value."""
  address_lt: String

  """All values less than or equal the given value."""
  address_lte: String

  """All values greater than the given value."""
  address_gt: String

  """All values greater than or equal the given value."""
  address_gte: String

  """All values containing the given string."""
  address_contains: String

  """All values not containing the given string."""
  address_not_contains: String

  """All values starting with the given string."""
  address_starts_with: String

  """All values not starting with the given string."""
  address_not_starts_with: String

  """All values ending with the given string."""
  address_ends_with: String

  """All values not ending with the given string."""
  address_not_ends_with: String
  city: String

  """All values that are not equal to given value."""
  city_not: String

  """All values that are contained in given list."""
  city_in: [String!]

  """All values that are not contained in given list."""
  city_not_in: [String!]

  """All values less than the given value."""
  city_lt: String

  """All values less than or equal the given value."""
  city_lte: String

  """All values greater than the given value."""
  city_gt: String

  """All values greater than or equal the given value."""
  city_gte: String

  """All values containing the given string."""
  city_contains: String

  """All values not containing the given string."""
  city_not_contains: String

  """All values starting with the given string."""
  city_starts_with: String

  """All values not starting with the given string."""
  city_not_starts_with: String

  """All values ending with the given string."""
  city_ends_with: String

  """All values not ending with the given string."""
  city_not_ends_with: String
  state: String

  """All values that are not equal to given value."""
  state_not: String

  """All values that are contained in given list."""
  state_in: [String!]

  """All values that are not contained in given list."""
  state_not_in: [String!]

  """All values less than the given value."""
  state_lt: String

  """All values less than or equal the given value."""
  state_lte: String

  """All values greater than the given value."""
  state_gt: String

  """All values greater than or equal the given value."""
  state_gte: String

  """All values containing the given string."""
  state_contains: String

  """All values not containing the given string."""
  state_not_contains: String

  """All values starting with the given string."""
  state_starts_with: String

  """All values not starting with the given string."""
  state_not_starts_with: String

  """All values ending with the given string."""
  state_ends_with: String

  """All values not ending with the given string."""
  state_not_ends_with: String
  zip: Int

  """All values that are not equal to given value."""
  zip_not: Int

  """All values that are contained in given list."""
  zip_in: [Int!]

  """All values that are not contained in given list."""
  zip_not_in: [Int!]

  """All values less than the given value."""
  zip_lt: Int

  """All values less than or equal the given value."""
  zip_lte: Int

  """All values greater than the given value."""
  zip_gt: Int

  """All values greater than or equal the given value."""
  zip_gte: Int
  stripeId: String

  """All values that are not equal to given value."""
  stripeId_not: String

  """All values that are contained in given list."""
  stripeId_in: [String!]

  """All values that are not contained in given list."""
  stripeId_not_in: [String!]

  """All values less than the given value."""
  stripeId_lt: String

  """All values less than or equal the given value."""
  stripeId_lte: String

  """All values greater than the given value."""
  stripeId_gt: String

  """All values greater than or equal the given value."""
  stripeId_gte: String

  """All values containing the given string."""
  stripeId_contains: String

  """All values not containing the given string."""
  stripeId_not_contains: String

  """All values starting with the given string."""
  stripeId_starts_with: String

  """All values not starting with the given string."""
  stripeId_not_starts_with: String

  """All values ending with the given string."""
  stripeId_ends_with: String

  """All values not ending with the given string."""
  stripeId_not_ends_with: String
  resetToken: String

  """All values that are not equal to given value."""
  resetToken_not: String

  """All values that are contained in given list."""
  resetToken_in: [String!]

  """All values that are not contained in given list."""
  resetToken_not_in: [String!]

  """All values less than the given value."""
  resetToken_lt: String

  """All values less than or equal the given value."""
  resetToken_lte: String

  """All values greater than the given value."""
  resetToken_gt: String

  """All values greater than or equal the given value."""
  resetToken_gte: String

  """All values containing the given string."""
  resetToken_contains: String

  """All values not containing the given string."""
  resetToken_not_contains: String

  """All values starting with the given string."""
  resetToken_starts_with: String

  """All values not starting with the given string."""
  resetToken_not_starts_with: String

  """All values ending with the given string."""
  resetToken_ends_with: String

  """All values not ending with the given string."""
  resetToken_not_ends_with: String
  resetTokenExpiry: String

  """All values that are not equal to given value."""
  resetTokenExpiry_not: String

  """All values that are contained in given list."""
  resetTokenExpiry_in: [String!]

  """All values that are not contained in given list."""
  resetTokenExpiry_not_in: [String!]

  """All values less than the given value."""
  resetTokenExpiry_lt: String

  """All values less than or equal the given value."""
  resetTokenExpiry_lte: String

  """All values greater than the given value."""
  resetTokenExpiry_gt: String

  """All values greater than or equal the given value."""
  resetTokenExpiry_gte: String

  """All values containing the given string."""
  resetTokenExpiry_contains: String

  """All values not containing the given string."""
  resetTokenExpiry_not_contains: String

  """All values starting with the given string."""
  resetTokenExpiry_starts_with: String

  """All values not starting with the given string."""
  resetTokenExpiry_not_starts_with: String

  """All values ending with the given string."""
  resetTokenExpiry_ends_with: String

  """All values not ending with the given string."""
  resetTokenExpiry_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  students_every: StudentWhereInput
  students_some: StudentWhereInput
  students_none: StudentWhereInput
}

input ClientWhereUniqueInput {
  id: ID
  email: String
}

scalar DateTime

enum Day {
  SUNDAY
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
}

type Employee implements Node {
  id: ID!
  email: String!
  password: String!
  phone: String!
  firstName: String!
  lastName: String!
  gender: Gender!
  address: String!
  city: String!
  state: String!
  zip: Int!
  bio: String!
  role: [Role!]!
  imageURL: String!
  startDate: DateTime!
  currentEmployee: Boolean!
  clients(where: StudentWhereInput, orderBy: StudentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Student!]
  classes(where: ClassWhereInput, orderBy: ClassOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Class!]
  lessons(where: LessonWhereInput, orderBy: LessonOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Lesson!]
  lessonSinglePrice: Int
  lessonDoublePrice: Int
  createdMessages(where: MessageWhereInput, orderBy: MessageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Message!]
  taggedMessages(where: MessageWhereInput, orderBy: MessageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Message!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type EmployeeConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [EmployeeEdge]!
  aggregate: AggregateEmployee!
}

input EmployeeCreateInput {
  id: ID
  email: String!
  password: String!
  phone: String!
  firstName: String!
  lastName: String!
  gender: Gender!
  address: String!
  city: String!
  state: String!
  zip: Int!
  bio: String!
  imageURL: String!
  startDate: DateTime!
  currentEmployee: Boolean
  lessonSinglePrice: Int
  lessonDoublePrice: Int
  role: EmployeeCreateroleInput
  clients: StudentCreateManyInput
  classes: ClassCreateManyWithoutInstructorInput
  lessons: LessonCreateManyWithoutInstructorInput
  createdMessages: MessageCreateManyWithoutAuthorInput
  taggedMessages: MessageCreateManyWithoutTaggedEmployeesInput
}

input EmployeeCreateManyWithoutTaggedMessagesInput {
  create: [EmployeeCreateWithoutTaggedMessagesInput!]
  connect: [EmployeeWhereUniqueInput!]
}

input EmployeeCreateOneWithoutClassesInput {
  create: EmployeeCreateWithoutClassesInput
  connect: EmployeeWhereUniqueInput
}

input EmployeeCreateOneWithoutCreatedMessagesInput {
  create: EmployeeCreateWithoutCreatedMessagesInput
  connect: EmployeeWhereUniqueInput
}

input EmployeeCreateOneWithoutLessonsInput {
  create: EmployeeCreateWithoutLessonsInput
  connect: EmployeeWhereUniqueInput
}

input EmployeeCreateroleInput {
  set: [Role!]
}

input EmployeeCreateWithoutClassesInput {
  id: ID
  email: String!
  password: String!
  phone: String!
  firstName: String!
  lastName: String!
  gender: Gender!
  address: String!
  city: String!
  state: String!
  zip: Int!
  bio: String!
  imageURL: String!
  startDate: DateTime!
  currentEmployee: Boolean
  lessonSinglePrice: Int
  lessonDoublePrice: Int
  role: EmployeeCreateroleInput
  clients: StudentCreateManyInput
  lessons: LessonCreateManyWithoutInstructorInput
  createdMessages: MessageCreateManyWithoutAuthorInput
  taggedMessages: MessageCreateManyWithoutTaggedEmployeesInput
}

input EmployeeCreateWithoutCreatedMessagesInput {
  id: ID
  email: String!
  password: String!
  phone: String!
  firstName: String!
  lastName: String!
  gender: Gender!
  address: String!
  city: String!
  state: String!
  zip: Int!
  bio: String!
  imageURL: String!
  startDate: DateTime!
  currentEmployee: Boolean
  lessonSinglePrice: Int
  lessonDoublePrice: Int
  role: EmployeeCreateroleInput
  clients: StudentCreateManyInput
  classes: ClassCreateManyWithoutInstructorInput
  lessons: LessonCreateManyWithoutInstructorInput
  taggedMessages: MessageCreateManyWithoutTaggedEmployeesInput
}

input EmployeeCreateWithoutLessonsInput {
  id: ID
  email: String!
  password: String!
  phone: String!
  firstName: String!
  lastName: String!
  gender: Gender!
  address: String!
  city: String!
  state: String!
  zip: Int!
  bio: String!
  imageURL: String!
  startDate: DateTime!
  currentEmployee: Boolean
  lessonSinglePrice: Int
  lessonDoublePrice: Int
  role: EmployeeCreateroleInput
  clients: StudentCreateManyInput
  classes: ClassCreateManyWithoutInstructorInput
  createdMessages: MessageCreateManyWithoutAuthorInput
  taggedMessages: MessageCreateManyWithoutTaggedEmployeesInput
}

input EmployeeCreateWithoutTaggedMessagesInput {
  id: ID
  email: String!
  password: String!
  phone: String!
  firstName: String!
  lastName: String!
  gender: Gender!
  address: String!
  city: String!
  state: String!
  zip: Int!
  bio: String!
  imageURL: String!
  startDate: DateTime!
  currentEmployee: Boolean
  lessonSinglePrice: Int
  lessonDoublePrice: Int
  role: EmployeeCreateroleInput
  clients: StudentCreateManyInput
  classes: ClassCreateManyWithoutInstructorInput
  lessons: LessonCreateManyWithoutInstructorInput
  createdMessages: MessageCreateManyWithoutAuthorInput
}

"""An edge in a connection."""
type EmployeeEdge {
  """The item at the end of the edge."""
  node: Employee!

  """A cursor for use in pagination."""
  cursor: String!
}

enum EmployeeOrderByInput {
  id_ASC
  id_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  phone_ASC
  phone_DESC
  firstName_ASC
  firstName_DESC
  lastName_ASC
  lastName_DESC
  gender_ASC
  gender_DESC
  address_ASC
  address_DESC
  city_ASC
  city_DESC
  state_ASC
  state_DESC
  zip_ASC
  zip_DESC
  bio_ASC
  bio_DESC
  imageURL_ASC
  imageURL_DESC
  startDate_ASC
  startDate_DESC
  currentEmployee_ASC
  currentEmployee_DESC
  lessonSinglePrice_ASC
  lessonSinglePrice_DESC
  lessonDoublePrice_ASC
  lessonDoublePrice_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type EmployeePreviousValues {
  id: ID!
  email: String!
  password: String!
  phone: String!
  firstName: String!
  lastName: String!
  gender: Gender!
  address: String!
  city: String!
  state: String!
  zip: Int!
  bio: String!
  role: [Role!]!
  imageURL: String!
  startDate: DateTime!
  currentEmployee: Boolean!
  lessonSinglePrice: Int
  lessonDoublePrice: Int
  createdAt: DateTime!
  updatedAt: DateTime!
}

input EmployeeScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [EmployeeScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [EmployeeScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [EmployeeScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  password: String

  """All values that are not equal to given value."""
  password_not: String

  """All values that are contained in given list."""
  password_in: [String!]

  """All values that are not contained in given list."""
  password_not_in: [String!]

  """All values less than the given value."""
  password_lt: String

  """All values less than or equal the given value."""
  password_lte: String

  """All values greater than the given value."""
  password_gt: String

  """All values greater than or equal the given value."""
  password_gte: String

  """All values containing the given string."""
  password_contains: String

  """All values not containing the given string."""
  password_not_contains: String

  """All values starting with the given string."""
  password_starts_with: String

  """All values not starting with the given string."""
  password_not_starts_with: String

  """All values ending with the given string."""
  password_ends_with: String

  """All values not ending with the given string."""
  password_not_ends_with: String
  phone: String

  """All values that are not equal to given value."""
  phone_not: String

  """All values that are contained in given list."""
  phone_in: [String!]

  """All values that are not contained in given list."""
  phone_not_in: [String!]

  """All values less than the given value."""
  phone_lt: String

  """All values less than or equal the given value."""
  phone_lte: String

  """All values greater than the given value."""
  phone_gt: String

  """All values greater than or equal the given value."""
  phone_gte: String

  """All values containing the given string."""
  phone_contains: String

  """All values not containing the given string."""
  phone_not_contains: String

  """All values starting with the given string."""
  phone_starts_with: String

  """All values not starting with the given string."""
  phone_not_starts_with: String

  """All values ending with the given string."""
  phone_ends_with: String

  """All values not ending with the given string."""
  phone_not_ends_with: String
  firstName: String

  """All values that are not equal to given value."""
  firstName_not: String

  """All values that are contained in given list."""
  firstName_in: [String!]

  """All values that are not contained in given list."""
  firstName_not_in: [String!]

  """All values less than the given value."""
  firstName_lt: String

  """All values less than or equal the given value."""
  firstName_lte: String

  """All values greater than the given value."""
  firstName_gt: String

  """All values greater than or equal the given value."""
  firstName_gte: String

  """All values containing the given string."""
  firstName_contains: String

  """All values not containing the given string."""
  firstName_not_contains: String

  """All values starting with the given string."""
  firstName_starts_with: String

  """All values not starting with the given string."""
  firstName_not_starts_with: String

  """All values ending with the given string."""
  firstName_ends_with: String

  """All values not ending with the given string."""
  firstName_not_ends_with: String
  lastName: String

  """All values that are not equal to given value."""
  lastName_not: String

  """All values that are contained in given list."""
  lastName_in: [String!]

  """All values that are not contained in given list."""
  lastName_not_in: [String!]

  """All values less than the given value."""
  lastName_lt: String

  """All values less than or equal the given value."""
  lastName_lte: String

  """All values greater than the given value."""
  lastName_gt: String

  """All values greater than or equal the given value."""
  lastName_gte: String

  """All values containing the given string."""
  lastName_contains: String

  """All values not containing the given string."""
  lastName_not_contains: String

  """All values starting with the given string."""
  lastName_starts_with: String

  """All values not starting with the given string."""
  lastName_not_starts_with: String

  """All values ending with the given string."""
  lastName_ends_with: String

  """All values not ending with the given string."""
  lastName_not_ends_with: String
  gender: Gender

  """All values that are not equal to given value."""
  gender_not: Gender

  """All values that are contained in given list."""
  gender_in: [Gender!]

  """All values that are not contained in given list."""
  gender_not_in: [Gender!]
  address: String

  """All values that are not equal to given value."""
  address_not: String

  """All values that are contained in given list."""
  address_in: [String!]

  """All values that are not contained in given list."""
  address_not_in: [String!]

  """All values less than the given value."""
  address_lt: String

  """All values less than or equal the given value."""
  address_lte: String

  """All values greater than the given value."""
  address_gt: String

  """All values greater than or equal the given value."""
  address_gte: String

  """All values containing the given string."""
  address_contains: String

  """All values not containing the given string."""
  address_not_contains: String

  """All values starting with the given string."""
  address_starts_with: String

  """All values not starting with the given string."""
  address_not_starts_with: String

  """All values ending with the given string."""
  address_ends_with: String

  """All values not ending with the given string."""
  address_not_ends_with: String
  city: String

  """All values that are not equal to given value."""
  city_not: String

  """All values that are contained in given list."""
  city_in: [String!]

  """All values that are not contained in given list."""
  city_not_in: [String!]

  """All values less than the given value."""
  city_lt: String

  """All values less than or equal the given value."""
  city_lte: String

  """All values greater than the given value."""
  city_gt: String

  """All values greater than or equal the given value."""
  city_gte: String

  """All values containing the given string."""
  city_contains: String

  """All values not containing the given string."""
  city_not_contains: String

  """All values starting with the given string."""
  city_starts_with: String

  """All values not starting with the given string."""
  city_not_starts_with: String

  """All values ending with the given string."""
  city_ends_with: String

  """All values not ending with the given string."""
  city_not_ends_with: String
  state: String

  """All values that are not equal to given value."""
  state_not: String

  """All values that are contained in given list."""
  state_in: [String!]

  """All values that are not contained in given list."""
  state_not_in: [String!]

  """All values less than the given value."""
  state_lt: String

  """All values less than or equal the given value."""
  state_lte: String

  """All values greater than the given value."""
  state_gt: String

  """All values greater than or equal the given value."""
  state_gte: String

  """All values containing the given string."""
  state_contains: String

  """All values not containing the given string."""
  state_not_contains: String

  """All values starting with the given string."""
  state_starts_with: String

  """All values not starting with the given string."""
  state_not_starts_with: String

  """All values ending with the given string."""
  state_ends_with: String

  """All values not ending with the given string."""
  state_not_ends_with: String
  zip: Int

  """All values that are not equal to given value."""
  zip_not: Int

  """All values that are contained in given list."""
  zip_in: [Int!]

  """All values that are not contained in given list."""
  zip_not_in: [Int!]

  """All values less than the given value."""
  zip_lt: Int

  """All values less than or equal the given value."""
  zip_lte: Int

  """All values greater than the given value."""
  zip_gt: Int

  """All values greater than or equal the given value."""
  zip_gte: Int
  bio: String

  """All values that are not equal to given value."""
  bio_not: String

  """All values that are contained in given list."""
  bio_in: [String!]

  """All values that are not contained in given list."""
  bio_not_in: [String!]

  """All values less than the given value."""
  bio_lt: String

  """All values less than or equal the given value."""
  bio_lte: String

  """All values greater than the given value."""
  bio_gt: String

  """All values greater than or equal the given value."""
  bio_gte: String

  """All values containing the given string."""
  bio_contains: String

  """All values not containing the given string."""
  bio_not_contains: String

  """All values starting with the given string."""
  bio_starts_with: String

  """All values not starting with the given string."""
  bio_not_starts_with: String

  """All values ending with the given string."""
  bio_ends_with: String

  """All values not ending with the given string."""
  bio_not_ends_with: String
  imageURL: String

  """All values that are not equal to given value."""
  imageURL_not: String

  """All values that are contained in given list."""
  imageURL_in: [String!]

  """All values that are not contained in given list."""
  imageURL_not_in: [String!]

  """All values less than the given value."""
  imageURL_lt: String

  """All values less than or equal the given value."""
  imageURL_lte: String

  """All values greater than the given value."""
  imageURL_gt: String

  """All values greater than or equal the given value."""
  imageURL_gte: String

  """All values containing the given string."""
  imageURL_contains: String

  """All values not containing the given string."""
  imageURL_not_contains: String

  """All values starting with the given string."""
  imageURL_starts_with: String

  """All values not starting with the given string."""
  imageURL_not_starts_with: String

  """All values ending with the given string."""
  imageURL_ends_with: String

  """All values not ending with the given string."""
  imageURL_not_ends_with: String
  startDate: DateTime

  """All values that are not equal to given value."""
  startDate_not: DateTime

  """All values that are contained in given list."""
  startDate_in: [DateTime!]

  """All values that are not contained in given list."""
  startDate_not_in: [DateTime!]

  """All values less than the given value."""
  startDate_lt: DateTime

  """All values less than or equal the given value."""
  startDate_lte: DateTime

  """All values greater than the given value."""
  startDate_gt: DateTime

  """All values greater than or equal the given value."""
  startDate_gte: DateTime
  currentEmployee: Boolean

  """All values that are not equal to given value."""
  currentEmployee_not: Boolean
  lessonSinglePrice: Int

  """All values that are not equal to given value."""
  lessonSinglePrice_not: Int

  """All values that are contained in given list."""
  lessonSinglePrice_in: [Int!]

  """All values that are not contained in given list."""
  lessonSinglePrice_not_in: [Int!]

  """All values less than the given value."""
  lessonSinglePrice_lt: Int

  """All values less than or equal the given value."""
  lessonSinglePrice_lte: Int

  """All values greater than the given value."""
  lessonSinglePrice_gt: Int

  """All values greater than or equal the given value."""
  lessonSinglePrice_gte: Int
  lessonDoublePrice: Int

  """All values that are not equal to given value."""
  lessonDoublePrice_not: Int

  """All values that are contained in given list."""
  lessonDoublePrice_in: [Int!]

  """All values that are not contained in given list."""
  lessonDoublePrice_not_in: [Int!]

  """All values less than the given value."""
  lessonDoublePrice_lt: Int

  """All values less than or equal the given value."""
  lessonDoublePrice_lte: Int

  """All values greater than the given value."""
  lessonDoublePrice_gt: Int

  """All values greater than or equal the given value."""
  lessonDoublePrice_gte: Int
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

type EmployeeSubscriptionPayload {
  mutation: MutationType!
  node: Employee
  updatedFields: [String!]
  previousValues: EmployeePreviousValues
}

input EmployeeSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [EmployeeSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [EmployeeSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [EmployeeSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: EmployeeWhereInput
}

input EmployeeUpdateInput {
  email: String
  password: String
  phone: String
  firstName: String
  lastName: String
  gender: Gender
  address: String
  city: String
  state: String
  zip: Int
  bio: String
  imageURL: String
  startDate: DateTime
  currentEmployee: Boolean
  lessonSinglePrice: Int
  lessonDoublePrice: Int
  role: EmployeeUpdateroleInput
  clients: StudentUpdateManyInput
  classes: ClassUpdateManyWithoutInstructorInput
  lessons: LessonUpdateManyWithoutInstructorInput
  createdMessages: MessageUpdateManyWithoutAuthorInput
  taggedMessages: MessageUpdateManyWithoutTaggedEmployeesInput
}

input EmployeeUpdateManyDataInput {
  email: String
  password: String
  phone: String
  firstName: String
  lastName: String
  gender: Gender
  address: String
  city: String
  state: String
  zip: Int
  bio: String
  imageURL: String
  startDate: DateTime
  currentEmployee: Boolean
  lessonSinglePrice: Int
  lessonDoublePrice: Int
  role: EmployeeUpdateroleInput
}

input EmployeeUpdateManyMutationInput {
  email: String
  password: String
  phone: String
  firstName: String
  lastName: String
  gender: Gender
  address: String
  city: String
  state: String
  zip: Int
  bio: String
  imageURL: String
  startDate: DateTime
  currentEmployee: Boolean
  lessonSinglePrice: Int
  lessonDoublePrice: Int
  role: EmployeeUpdateroleInput
}

input EmployeeUpdateManyWithoutTaggedMessagesInput {
  create: [EmployeeCreateWithoutTaggedMessagesInput!]
  connect: [EmployeeWhereUniqueInput!]
  set: [EmployeeWhereUniqueInput!]
  disconnect: [EmployeeWhereUniqueInput!]
  delete: [EmployeeWhereUniqueInput!]
  update: [EmployeeUpdateWithWhereUniqueWithoutTaggedMessagesInput!]
  updateMany: [EmployeeUpdateManyWithWhereNestedInput!]
  deleteMany: [EmployeeScalarWhereInput!]
  upsert: [EmployeeUpsertWithWhereUniqueWithoutTaggedMessagesInput!]
}

input EmployeeUpdateManyWithWhereNestedInput {
  where: EmployeeScalarWhereInput!
  data: EmployeeUpdateManyDataInput!
}

input EmployeeUpdateOneRequiredWithoutClassesInput {
  create: EmployeeCreateWithoutClassesInput
  connect: EmployeeWhereUniqueInput
  update: EmployeeUpdateWithoutClassesDataInput
  upsert: EmployeeUpsertWithoutClassesInput
}

input EmployeeUpdateOneRequiredWithoutCreatedMessagesInput {
  create: EmployeeCreateWithoutCreatedMessagesInput
  connect: EmployeeWhereUniqueInput
  update: EmployeeUpdateWithoutCreatedMessagesDataInput
  upsert: EmployeeUpsertWithoutCreatedMessagesInput
}

input EmployeeUpdateOneRequiredWithoutLessonsInput {
  create: EmployeeCreateWithoutLessonsInput
  connect: EmployeeWhereUniqueInput
  update: EmployeeUpdateWithoutLessonsDataInput
  upsert: EmployeeUpsertWithoutLessonsInput
}

input EmployeeUpdateroleInput {
  set: [Role!]
}

input EmployeeUpdateWithoutClassesDataInput {
  email: String
  password: String
  phone: String
  firstName: String
  lastName: String
  gender: Gender
  address: String
  city: String
  state: String
  zip: Int
  bio: String
  imageURL: String
  startDate: DateTime
  currentEmployee: Boolean
  lessonSinglePrice: Int
  lessonDoublePrice: Int
  role: EmployeeUpdateroleInput
  clients: StudentUpdateManyInput
  lessons: LessonUpdateManyWithoutInstructorInput
  createdMessages: MessageUpdateManyWithoutAuthorInput
  taggedMessages: MessageUpdateManyWithoutTaggedEmployeesInput
}

input EmployeeUpdateWithoutCreatedMessagesDataInput {
  email: String
  password: String
  phone: String
  firstName: String
  lastName: String
  gender: Gender
  address: String
  city: String
  state: String
  zip: Int
  bio: String
  imageURL: String
  startDate: DateTime
  currentEmployee: Boolean
  lessonSinglePrice: Int
  lessonDoublePrice: Int
  role: EmployeeUpdateroleInput
  clients: StudentUpdateManyInput
  classes: ClassUpdateManyWithoutInstructorInput
  lessons: LessonUpdateManyWithoutInstructorInput
  taggedMessages: MessageUpdateManyWithoutTaggedEmployeesInput
}

input EmployeeUpdateWithoutLessonsDataInput {
  email: String
  password: String
  phone: String
  firstName: String
  lastName: String
  gender: Gender
  address: String
  city: String
  state: String
  zip: Int
  bio: String
  imageURL: String
  startDate: DateTime
  currentEmployee: Boolean
  lessonSinglePrice: Int
  lessonDoublePrice: Int
  role: EmployeeUpdateroleInput
  clients: StudentUpdateManyInput
  classes: ClassUpdateManyWithoutInstructorInput
  createdMessages: MessageUpdateManyWithoutAuthorInput
  taggedMessages: MessageUpdateManyWithoutTaggedEmployeesInput
}

input EmployeeUpdateWithoutTaggedMessagesDataInput {
  email: String
  password: String
  phone: String
  firstName: String
  lastName: String
  gender: Gender
  address: String
  city: String
  state: String
  zip: Int
  bio: String
  imageURL: String
  startDate: DateTime
  currentEmployee: Boolean
  lessonSinglePrice: Int
  lessonDoublePrice: Int
  role: EmployeeUpdateroleInput
  clients: StudentUpdateManyInput
  classes: ClassUpdateManyWithoutInstructorInput
  lessons: LessonUpdateManyWithoutInstructorInput
  createdMessages: MessageUpdateManyWithoutAuthorInput
}

input EmployeeUpdateWithWhereUniqueWithoutTaggedMessagesInput {
  where: EmployeeWhereUniqueInput!
  data: EmployeeUpdateWithoutTaggedMessagesDataInput!
}

input EmployeeUpsertWithoutClassesInput {
  update: EmployeeUpdateWithoutClassesDataInput!
  create: EmployeeCreateWithoutClassesInput!
}

input EmployeeUpsertWithoutCreatedMessagesInput {
  update: EmployeeUpdateWithoutCreatedMessagesDataInput!
  create: EmployeeCreateWithoutCreatedMessagesInput!
}

input EmployeeUpsertWithoutLessonsInput {
  update: EmployeeUpdateWithoutLessonsDataInput!
  create: EmployeeCreateWithoutLessonsInput!
}

input EmployeeUpsertWithWhereUniqueWithoutTaggedMessagesInput {
  where: EmployeeWhereUniqueInput!
  update: EmployeeUpdateWithoutTaggedMessagesDataInput!
  create: EmployeeCreateWithoutTaggedMessagesInput!
}

input EmployeeWhereInput {
  """Logical AND on all given filters."""
  AND: [EmployeeWhereInput!]

  """Logical OR on all given filters."""
  OR: [EmployeeWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [EmployeeWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  password: String

  """All values that are not equal to given value."""
  password_not: String

  """All values that are contained in given list."""
  password_in: [String!]

  """All values that are not contained in given list."""
  password_not_in: [String!]

  """All values less than the given value."""
  password_lt: String

  """All values less than or equal the given value."""
  password_lte: String

  """All values greater than the given value."""
  password_gt: String

  """All values greater than or equal the given value."""
  password_gte: String

  """All values containing the given string."""
  password_contains: String

  """All values not containing the given string."""
  password_not_contains: String

  """All values starting with the given string."""
  password_starts_with: String

  """All values not starting with the given string."""
  password_not_starts_with: String

  """All values ending with the given string."""
  password_ends_with: String

  """All values not ending with the given string."""
  password_not_ends_with: String
  phone: String

  """All values that are not equal to given value."""
  phone_not: String

  """All values that are contained in given list."""
  phone_in: [String!]

  """All values that are not contained in given list."""
  phone_not_in: [String!]

  """All values less than the given value."""
  phone_lt: String

  """All values less than or equal the given value."""
  phone_lte: String

  """All values greater than the given value."""
  phone_gt: String

  """All values greater than or equal the given value."""
  phone_gte: String

  """All values containing the given string."""
  phone_contains: String

  """All values not containing the given string."""
  phone_not_contains: String

  """All values starting with the given string."""
  phone_starts_with: String

  """All values not starting with the given string."""
  phone_not_starts_with: String

  """All values ending with the given string."""
  phone_ends_with: String

  """All values not ending with the given string."""
  phone_not_ends_with: String
  firstName: String

  """All values that are not equal to given value."""
  firstName_not: String

  """All values that are contained in given list."""
  firstName_in: [String!]

  """All values that are not contained in given list."""
  firstName_not_in: [String!]

  """All values less than the given value."""
  firstName_lt: String

  """All values less than or equal the given value."""
  firstName_lte: String

  """All values greater than the given value."""
  firstName_gt: String

  """All values greater than or equal the given value."""
  firstName_gte: String

  """All values containing the given string."""
  firstName_contains: String

  """All values not containing the given string."""
  firstName_not_contains: String

  """All values starting with the given string."""
  firstName_starts_with: String

  """All values not starting with the given string."""
  firstName_not_starts_with: String

  """All values ending with the given string."""
  firstName_ends_with: String

  """All values not ending with the given string."""
  firstName_not_ends_with: String
  lastName: String

  """All values that are not equal to given value."""
  lastName_not: String

  """All values that are contained in given list."""
  lastName_in: [String!]

  """All values that are not contained in given list."""
  lastName_not_in: [String!]

  """All values less than the given value."""
  lastName_lt: String

  """All values less than or equal the given value."""
  lastName_lte: String

  """All values greater than the given value."""
  lastName_gt: String

  """All values greater than or equal the given value."""
  lastName_gte: String

  """All values containing the given string."""
  lastName_contains: String

  """All values not containing the given string."""
  lastName_not_contains: String

  """All values starting with the given string."""
  lastName_starts_with: String

  """All values not starting with the given string."""
  lastName_not_starts_with: String

  """All values ending with the given string."""
  lastName_ends_with: String

  """All values not ending with the given string."""
  lastName_not_ends_with: String
  gender: Gender

  """All values that are not equal to given value."""
  gender_not: Gender

  """All values that are contained in given list."""
  gender_in: [Gender!]

  """All values that are not contained in given list."""
  gender_not_in: [Gender!]
  address: String

  """All values that are not equal to given value."""
  address_not: String

  """All values that are contained in given list."""
  address_in: [String!]

  """All values that are not contained in given list."""
  address_not_in: [String!]

  """All values less than the given value."""
  address_lt: String

  """All values less than or equal the given value."""
  address_lte: String

  """All values greater than the given value."""
  address_gt: String

  """All values greater than or equal the given value."""
  address_gte: String

  """All values containing the given string."""
  address_contains: String

  """All values not containing the given string."""
  address_not_contains: String

  """All values starting with the given string."""
  address_starts_with: String

  """All values not starting with the given string."""
  address_not_starts_with: String

  """All values ending with the given string."""
  address_ends_with: String

  """All values not ending with the given string."""
  address_not_ends_with: String
  city: String

  """All values that are not equal to given value."""
  city_not: String

  """All values that are contained in given list."""
  city_in: [String!]

  """All values that are not contained in given list."""
  city_not_in: [String!]

  """All values less than the given value."""
  city_lt: String

  """All values less than or equal the given value."""
  city_lte: String

  """All values greater than the given value."""
  city_gt: String

  """All values greater than or equal the given value."""
  city_gte: String

  """All values containing the given string."""
  city_contains: String

  """All values not containing the given string."""
  city_not_contains: String

  """All values starting with the given string."""
  city_starts_with: String

  """All values not starting with the given string."""
  city_not_starts_with: String

  """All values ending with the given string."""
  city_ends_with: String

  """All values not ending with the given string."""
  city_not_ends_with: String
  state: String

  """All values that are not equal to given value."""
  state_not: String

  """All values that are contained in given list."""
  state_in: [String!]

  """All values that are not contained in given list."""
  state_not_in: [String!]

  """All values less than the given value."""
  state_lt: String

  """All values less than or equal the given value."""
  state_lte: String

  """All values greater than the given value."""
  state_gt: String

  """All values greater than or equal the given value."""
  state_gte: String

  """All values containing the given string."""
  state_contains: String

  """All values not containing the given string."""
  state_not_contains: String

  """All values starting with the given string."""
  state_starts_with: String

  """All values not starting with the given string."""
  state_not_starts_with: String

  """All values ending with the given string."""
  state_ends_with: String

  """All values not ending with the given string."""
  state_not_ends_with: String
  zip: Int

  """All values that are not equal to given value."""
  zip_not: Int

  """All values that are contained in given list."""
  zip_in: [Int!]

  """All values that are not contained in given list."""
  zip_not_in: [Int!]

  """All values less than the given value."""
  zip_lt: Int

  """All values less than or equal the given value."""
  zip_lte: Int

  """All values greater than the given value."""
  zip_gt: Int

  """All values greater than or equal the given value."""
  zip_gte: Int
  bio: String

  """All values that are not equal to given value."""
  bio_not: String

  """All values that are contained in given list."""
  bio_in: [String!]

  """All values that are not contained in given list."""
  bio_not_in: [String!]

  """All values less than the given value."""
  bio_lt: String

  """All values less than or equal the given value."""
  bio_lte: String

  """All values greater than the given value."""
  bio_gt: String

  """All values greater than or equal the given value."""
  bio_gte: String

  """All values containing the given string."""
  bio_contains: String

  """All values not containing the given string."""
  bio_not_contains: String

  """All values starting with the given string."""
  bio_starts_with: String

  """All values not starting with the given string."""
  bio_not_starts_with: String

  """All values ending with the given string."""
  bio_ends_with: String

  """All values not ending with the given string."""
  bio_not_ends_with: String
  imageURL: String

  """All values that are not equal to given value."""
  imageURL_not: String

  """All values that are contained in given list."""
  imageURL_in: [String!]

  """All values that are not contained in given list."""
  imageURL_not_in: [String!]

  """All values less than the given value."""
  imageURL_lt: String

  """All values less than or equal the given value."""
  imageURL_lte: String

  """All values greater than the given value."""
  imageURL_gt: String

  """All values greater than or equal the given value."""
  imageURL_gte: String

  """All values containing the given string."""
  imageURL_contains: String

  """All values not containing the given string."""
  imageURL_not_contains: String

  """All values starting with the given string."""
  imageURL_starts_with: String

  """All values not starting with the given string."""
  imageURL_not_starts_with: String

  """All values ending with the given string."""
  imageURL_ends_with: String

  """All values not ending with the given string."""
  imageURL_not_ends_with: String
  startDate: DateTime

  """All values that are not equal to given value."""
  startDate_not: DateTime

  """All values that are contained in given list."""
  startDate_in: [DateTime!]

  """All values that are not contained in given list."""
  startDate_not_in: [DateTime!]

  """All values less than the given value."""
  startDate_lt: DateTime

  """All values less than or equal the given value."""
  startDate_lte: DateTime

  """All values greater than the given value."""
  startDate_gt: DateTime

  """All values greater than or equal the given value."""
  startDate_gte: DateTime
  currentEmployee: Boolean

  """All values that are not equal to given value."""
  currentEmployee_not: Boolean
  lessonSinglePrice: Int

  """All values that are not equal to given value."""
  lessonSinglePrice_not: Int

  """All values that are contained in given list."""
  lessonSinglePrice_in: [Int!]

  """All values that are not contained in given list."""
  lessonSinglePrice_not_in: [Int!]

  """All values less than the given value."""
  lessonSinglePrice_lt: Int

  """All values less than or equal the given value."""
  lessonSinglePrice_lte: Int

  """All values greater than the given value."""
  lessonSinglePrice_gt: Int

  """All values greater than or equal the given value."""
  lessonSinglePrice_gte: Int
  lessonDoublePrice: Int

  """All values that are not equal to given value."""
  lessonDoublePrice_not: Int

  """All values that are contained in given list."""
  lessonDoublePrice_in: [Int!]

  """All values that are not contained in given list."""
  lessonDoublePrice_not_in: [Int!]

  """All values less than the given value."""
  lessonDoublePrice_lt: Int

  """All values less than or equal the given value."""
  lessonDoublePrice_lte: Int

  """All values greater than the given value."""
  lessonDoublePrice_gt: Int

  """All values greater than or equal the given value."""
  lessonDoublePrice_gte: Int
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  clients_every: StudentWhereInput
  clients_some: StudentWhereInput
  clients_none: StudentWhereInput
  classes_every: ClassWhereInput
  classes_some: ClassWhereInput
  classes_none: ClassWhereInput
  lessons_every: LessonWhereInput
  lessons_some: LessonWhereInput
  lessons_none: LessonWhereInput
  createdMessages_every: MessageWhereInput
  createdMessages_some: MessageWhereInput
  createdMessages_none: MessageWhereInput
  taggedMessages_every: MessageWhereInput
  taggedMessages_some: MessageWhereInput
  taggedMessages_none: MessageWhereInput
}

input EmployeeWhereUniqueInput {
  id: ID
  email: String
  phone: String
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

type Lesson implements Node {
  id: ID!
  instructor: Employee!
  client(where: StudentWhereInput, orderBy: StudentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Student!]
  duration: Int!
  type: LessonType
  day: Day!
  time: String!
  open: Boolean!
}

"""A connection to a list of items."""
type LessonConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [LessonEdge]!
  aggregate: AggregateLesson!
}

input LessonCreateInput {
  id: ID
  duration: Int!
  type: LessonType
  day: Day!
  time: String!
  open: Boolean!
  instructor: EmployeeCreateOneWithoutLessonsInput!
  client: StudentCreateManyWithoutLessonsInput
}

input LessonCreateManyWithoutClientInput {
  create: [LessonCreateWithoutClientInput!]
  connect: [LessonWhereUniqueInput!]
}

input LessonCreateManyWithoutInstructorInput {
  create: [LessonCreateWithoutInstructorInput!]
  connect: [LessonWhereUniqueInput!]
}

input LessonCreateWithoutClientInput {
  id: ID
  duration: Int!
  type: LessonType
  day: Day!
  time: String!
  open: Boolean!
  instructor: EmployeeCreateOneWithoutLessonsInput!
}

input LessonCreateWithoutInstructorInput {
  id: ID
  duration: Int!
  type: LessonType
  day: Day!
  time: String!
  open: Boolean!
  client: StudentCreateManyWithoutLessonsInput
}

"""An edge in a connection."""
type LessonEdge {
  """The item at the end of the edge."""
  node: Lesson!

  """A cursor for use in pagination."""
  cursor: String!
}

enum LessonOrderByInput {
  id_ASC
  id_DESC
  duration_ASC
  duration_DESC
  type_ASC
  type_DESC
  day_ASC
  day_DESC
  time_ASC
  time_DESC
  open_ASC
  open_DESC
}

type LessonPreviousValues {
  id: ID!
  duration: Int!
  type: LessonType
  day: Day!
  time: String!
  open: Boolean!
}

input LessonScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [LessonScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [LessonScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [LessonScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  duration: Int

  """All values that are not equal to given value."""
  duration_not: Int

  """All values that are contained in given list."""
  duration_in: [Int!]

  """All values that are not contained in given list."""
  duration_not_in: [Int!]

  """All values less than the given value."""
  duration_lt: Int

  """All values less than or equal the given value."""
  duration_lte: Int

  """All values greater than the given value."""
  duration_gt: Int

  """All values greater than or equal the given value."""
  duration_gte: Int
  type: LessonType

  """All values that are not equal to given value."""
  type_not: LessonType

  """All values that are contained in given list."""
  type_in: [LessonType!]

  """All values that are not contained in given list."""
  type_not_in: [LessonType!]
  day: Day

  """All values that are not equal to given value."""
  day_not: Day

  """All values that are contained in given list."""
  day_in: [Day!]

  """All values that are not contained in given list."""
  day_not_in: [Day!]
  time: String

  """All values that are not equal to given value."""
  time_not: String

  """All values that are contained in given list."""
  time_in: [String!]

  """All values that are not contained in given list."""
  time_not_in: [String!]

  """All values less than the given value."""
  time_lt: String

  """All values less than or equal the given value."""
  time_lte: String

  """All values greater than the given value."""
  time_gt: String

  """All values greater than or equal the given value."""
  time_gte: String

  """All values containing the given string."""
  time_contains: String

  """All values not containing the given string."""
  time_not_contains: String

  """All values starting with the given string."""
  time_starts_with: String

  """All values not starting with the given string."""
  time_not_starts_with: String

  """All values ending with the given string."""
  time_ends_with: String

  """All values not ending with the given string."""
  time_not_ends_with: String
  open: Boolean

  """All values that are not equal to given value."""
  open_not: Boolean
}

type LessonSubscriptionPayload {
  mutation: MutationType!
  node: Lesson
  updatedFields: [String!]
  previousValues: LessonPreviousValues
}

input LessonSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [LessonSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [LessonSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [LessonSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: LessonWhereInput
}

enum LessonType {
  SINGLE
  PAIR
}

input LessonUpdateInput {
  duration: Int
  type: LessonType
  day: Day
  time: String
  open: Boolean
  instructor: EmployeeUpdateOneRequiredWithoutLessonsInput
  client: StudentUpdateManyWithoutLessonsInput
}

input LessonUpdateManyDataInput {
  duration: Int
  type: LessonType
  day: Day
  time: String
  open: Boolean
}

input LessonUpdateManyMutationInput {
  duration: Int
  type: LessonType
  day: Day
  time: String
  open: Boolean
}

input LessonUpdateManyWithoutClientInput {
  create: [LessonCreateWithoutClientInput!]
  connect: [LessonWhereUniqueInput!]
  set: [LessonWhereUniqueInput!]
  disconnect: [LessonWhereUniqueInput!]
  delete: [LessonWhereUniqueInput!]
  update: [LessonUpdateWithWhereUniqueWithoutClientInput!]
  updateMany: [LessonUpdateManyWithWhereNestedInput!]
  deleteMany: [LessonScalarWhereInput!]
  upsert: [LessonUpsertWithWhereUniqueWithoutClientInput!]
}

input LessonUpdateManyWithoutInstructorInput {
  create: [LessonCreateWithoutInstructorInput!]
  connect: [LessonWhereUniqueInput!]
  set: [LessonWhereUniqueInput!]
  disconnect: [LessonWhereUniqueInput!]
  delete: [LessonWhereUniqueInput!]
  update: [LessonUpdateWithWhereUniqueWithoutInstructorInput!]
  updateMany: [LessonUpdateManyWithWhereNestedInput!]
  deleteMany: [LessonScalarWhereInput!]
  upsert: [LessonUpsertWithWhereUniqueWithoutInstructorInput!]
}

input LessonUpdateManyWithWhereNestedInput {
  where: LessonScalarWhereInput!
  data: LessonUpdateManyDataInput!
}

input LessonUpdateWithoutClientDataInput {
  duration: Int
  type: LessonType
  day: Day
  time: String
  open: Boolean
  instructor: EmployeeUpdateOneRequiredWithoutLessonsInput
}

input LessonUpdateWithoutInstructorDataInput {
  duration: Int
  type: LessonType
  day: Day
  time: String
  open: Boolean
  client: StudentUpdateManyWithoutLessonsInput
}

input LessonUpdateWithWhereUniqueWithoutClientInput {
  where: LessonWhereUniqueInput!
  data: LessonUpdateWithoutClientDataInput!
}

input LessonUpdateWithWhereUniqueWithoutInstructorInput {
  where: LessonWhereUniqueInput!
  data: LessonUpdateWithoutInstructorDataInput!
}

input LessonUpsertWithWhereUniqueWithoutClientInput {
  where: LessonWhereUniqueInput!
  update: LessonUpdateWithoutClientDataInput!
  create: LessonCreateWithoutClientInput!
}

input LessonUpsertWithWhereUniqueWithoutInstructorInput {
  where: LessonWhereUniqueInput!
  update: LessonUpdateWithoutInstructorDataInput!
  create: LessonCreateWithoutInstructorInput!
}

input LessonWhereInput {
  """Logical AND on all given filters."""
  AND: [LessonWhereInput!]

  """Logical OR on all given filters."""
  OR: [LessonWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [LessonWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  duration: Int

  """All values that are not equal to given value."""
  duration_not: Int

  """All values that are contained in given list."""
  duration_in: [Int!]

  """All values that are not contained in given list."""
  duration_not_in: [Int!]

  """All values less than the given value."""
  duration_lt: Int

  """All values less than or equal the given value."""
  duration_lte: Int

  """All values greater than the given value."""
  duration_gt: Int

  """All values greater than or equal the given value."""
  duration_gte: Int
  type: LessonType

  """All values that are not equal to given value."""
  type_not: LessonType

  """All values that are contained in given list."""
  type_in: [LessonType!]

  """All values that are not contained in given list."""
  type_not_in: [LessonType!]
  day: Day

  """All values that are not equal to given value."""
  day_not: Day

  """All values that are contained in given list."""
  day_in: [Day!]

  """All values that are not contained in given list."""
  day_not_in: [Day!]
  time: String

  """All values that are not equal to given value."""
  time_not: String

  """All values that are contained in given list."""
  time_in: [String!]

  """All values that are not contained in given list."""
  time_not_in: [String!]

  """All values less than the given value."""
  time_lt: String

  """All values less than or equal the given value."""
  time_lte: String

  """All values greater than the given value."""
  time_gt: String

  """All values greater than or equal the given value."""
  time_gte: String

  """All values containing the given string."""
  time_contains: String

  """All values not containing the given string."""
  time_not_contains: String

  """All values starting with the given string."""
  time_starts_with: String

  """All values not starting with the given string."""
  time_not_starts_with: String

  """All values ending with the given string."""
  time_ends_with: String

  """All values not ending with the given string."""
  time_not_ends_with: String
  open: Boolean

  """All values that are not equal to given value."""
  open_not: Boolean
  instructor: EmployeeWhereInput
  client_every: StudentWhereInput
  client_some: StudentWhereInput
  client_none: StudentWhereInput
}

input LessonWhereUniqueInput {
  id: ID
}

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type MedicalCondition implements Node {
  id: ID!
  description: String!
  student: Student
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type MedicalConditionConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [MedicalConditionEdge]!
  aggregate: AggregateMedicalCondition!
}

input MedicalConditionCreateInput {
  id: ID
  description: String!
  student: StudentCreateOneWithoutMedicalInput
}

input MedicalConditionCreateManyWithoutStudentInput {
  create: [MedicalConditionCreateWithoutStudentInput!]
  connect: [MedicalConditionWhereUniqueInput!]
}

input MedicalConditionCreateWithoutStudentInput {
  id: ID
  description: String!
}

"""An edge in a connection."""
type MedicalConditionEdge {
  """The item at the end of the edge."""
  node: MedicalCondition!

  """A cursor for use in pagination."""
  cursor: String!
}

enum MedicalConditionOrderByInput {
  id_ASC
  id_DESC
  description_ASC
  description_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type MedicalConditionPreviousValues {
  id: ID!
  description: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input MedicalConditionScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [MedicalConditionScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [MedicalConditionScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [MedicalConditionScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

type MedicalConditionSubscriptionPayload {
  mutation: MutationType!
  node: MedicalCondition
  updatedFields: [String!]
  previousValues: MedicalConditionPreviousValues
}

input MedicalConditionSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [MedicalConditionSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [MedicalConditionSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [MedicalConditionSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: MedicalConditionWhereInput
}

input MedicalConditionUpdateInput {
  description: String
  student: StudentUpdateOneWithoutMedicalInput
}

input MedicalConditionUpdateManyDataInput {
  description: String
}

input MedicalConditionUpdateManyMutationInput {
  description: String
}

input MedicalConditionUpdateManyWithoutStudentInput {
  create: [MedicalConditionCreateWithoutStudentInput!]
  connect: [MedicalConditionWhereUniqueInput!]
  set: [MedicalConditionWhereUniqueInput!]
  disconnect: [MedicalConditionWhereUniqueInput!]
  delete: [MedicalConditionWhereUniqueInput!]
  update: [MedicalConditionUpdateWithWhereUniqueWithoutStudentInput!]
  updateMany: [MedicalConditionUpdateManyWithWhereNestedInput!]
  deleteMany: [MedicalConditionScalarWhereInput!]
  upsert: [MedicalConditionUpsertWithWhereUniqueWithoutStudentInput!]
}

input MedicalConditionUpdateManyWithWhereNestedInput {
  where: MedicalConditionScalarWhereInput!
  data: MedicalConditionUpdateManyDataInput!
}

input MedicalConditionUpdateWithoutStudentDataInput {
  description: String
}

input MedicalConditionUpdateWithWhereUniqueWithoutStudentInput {
  where: MedicalConditionWhereUniqueInput!
  data: MedicalConditionUpdateWithoutStudentDataInput!
}

input MedicalConditionUpsertWithWhereUniqueWithoutStudentInput {
  where: MedicalConditionWhereUniqueInput!
  update: MedicalConditionUpdateWithoutStudentDataInput!
  create: MedicalConditionCreateWithoutStudentInput!
}

input MedicalConditionWhereInput {
  """Logical AND on all given filters."""
  AND: [MedicalConditionWhereInput!]

  """Logical OR on all given filters."""
  OR: [MedicalConditionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [MedicalConditionWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  student: StudentWhereInput
}

input MedicalConditionWhereUniqueInput {
  id: ID
}

type Message implements Node {
  id: ID!
  title: String!
  text: String!
  author: Employee!
  parent: Message
  taggedEmployees(where: EmployeeWhereInput, orderBy: EmployeeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Employee!]
  tags(where: MessageTagWhereInput, orderBy: MessageTagOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [MessageTag!]
  comments(where: MessageWhereInput, orderBy: MessageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Message!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type MessageConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [MessageEdge]!
  aggregate: AggregateMessage!
}

input MessageCreateInput {
  id: ID
  title: String!
  text: String!
  author: EmployeeCreateOneWithoutCreatedMessagesInput!
  parent: MessageCreateOneInput
  taggedEmployees: EmployeeCreateManyWithoutTaggedMessagesInput
  tags: MessageTagCreateManyWithoutMessagesInput
  comments: MessageCreateManyInput
}

input MessageCreateManyInput {
  create: [MessageCreateInput!]
  connect: [MessageWhereUniqueInput!]
}

input MessageCreateManyWithoutAuthorInput {
  create: [MessageCreateWithoutAuthorInput!]
  connect: [MessageWhereUniqueInput!]
}

input MessageCreateManyWithoutTaggedEmployeesInput {
  create: [MessageCreateWithoutTaggedEmployeesInput!]
  connect: [MessageWhereUniqueInput!]
}

input MessageCreateManyWithoutTagsInput {
  create: [MessageCreateWithoutTagsInput!]
  connect: [MessageWhereUniqueInput!]
}

input MessageCreateOneInput {
  create: MessageCreateInput
  connect: MessageWhereUniqueInput
}

input MessageCreateWithoutAuthorInput {
  id: ID
  title: String!
  text: String!
  parent: MessageCreateOneInput
  taggedEmployees: EmployeeCreateManyWithoutTaggedMessagesInput
  tags: MessageTagCreateManyWithoutMessagesInput
  comments: MessageCreateManyInput
}

input MessageCreateWithoutTaggedEmployeesInput {
  id: ID
  title: String!
  text: String!
  author: EmployeeCreateOneWithoutCreatedMessagesInput!
  parent: MessageCreateOneInput
  tags: MessageTagCreateManyWithoutMessagesInput
  comments: MessageCreateManyInput
}

input MessageCreateWithoutTagsInput {
  id: ID
  title: String!
  text: String!
  author: EmployeeCreateOneWithoutCreatedMessagesInput!
  parent: MessageCreateOneInput
  taggedEmployees: EmployeeCreateManyWithoutTaggedMessagesInput
  comments: MessageCreateManyInput
}

"""An edge in a connection."""
type MessageEdge {
  """The item at the end of the edge."""
  node: Message!

  """A cursor for use in pagination."""
  cursor: String!
}

enum MessageOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  text_ASC
  text_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type MessagePreviousValues {
  id: ID!
  title: String!
  text: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input MessageScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [MessageScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [MessageScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [MessageScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  text: String

  """All values that are not equal to given value."""
  text_not: String

  """All values that are contained in given list."""
  text_in: [String!]

  """All values that are not contained in given list."""
  text_not_in: [String!]

  """All values less than the given value."""
  text_lt: String

  """All values less than or equal the given value."""
  text_lte: String

  """All values greater than the given value."""
  text_gt: String

  """All values greater than or equal the given value."""
  text_gte: String

  """All values containing the given string."""
  text_contains: String

  """All values not containing the given string."""
  text_not_contains: String

  """All values starting with the given string."""
  text_starts_with: String

  """All values not starting with the given string."""
  text_not_starts_with: String

  """All values ending with the given string."""
  text_ends_with: String

  """All values not ending with the given string."""
  text_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

type MessageSubscriptionPayload {
  mutation: MutationType!
  node: Message
  updatedFields: [String!]
  previousValues: MessagePreviousValues
}

input MessageSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [MessageSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [MessageSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [MessageSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: MessageWhereInput
}

type MessageTag implements Node {
  id: ID!
  tag: String!
  messages(where: MessageWhereInput, orderBy: MessageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Message!]
}

"""A connection to a list of items."""
type MessageTagConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [MessageTagEdge]!
  aggregate: AggregateMessageTag!
}

input MessageTagCreateInput {
  id: ID
  tag: String!
  messages: MessageCreateManyWithoutTagsInput
}

input MessageTagCreateManyWithoutMessagesInput {
  create: [MessageTagCreateWithoutMessagesInput!]
  connect: [MessageTagWhereUniqueInput!]
}

input MessageTagCreateWithoutMessagesInput {
  id: ID
  tag: String!
}

"""An edge in a connection."""
type MessageTagEdge {
  """The item at the end of the edge."""
  node: MessageTag!

  """A cursor for use in pagination."""
  cursor: String!
}

enum MessageTagOrderByInput {
  id_ASC
  id_DESC
  tag_ASC
  tag_DESC
}

type MessageTagPreviousValues {
  id: ID!
  tag: String!
}

input MessageTagScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [MessageTagScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [MessageTagScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [MessageTagScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  tag: String

  """All values that are not equal to given value."""
  tag_not: String

  """All values that are contained in given list."""
  tag_in: [String!]

  """All values that are not contained in given list."""
  tag_not_in: [String!]

  """All values less than the given value."""
  tag_lt: String

  """All values less than or equal the given value."""
  tag_lte: String

  """All values greater than the given value."""
  tag_gt: String

  """All values greater than or equal the given value."""
  tag_gte: String

  """All values containing the given string."""
  tag_contains: String

  """All values not containing the given string."""
  tag_not_contains: String

  """All values starting with the given string."""
  tag_starts_with: String

  """All values not starting with the given string."""
  tag_not_starts_with: String

  """All values ending with the given string."""
  tag_ends_with: String

  """All values not ending with the given string."""
  tag_not_ends_with: String
}

type MessageTagSubscriptionPayload {
  mutation: MutationType!
  node: MessageTag
  updatedFields: [String!]
  previousValues: MessageTagPreviousValues
}

input MessageTagSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [MessageTagSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [MessageTagSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [MessageTagSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: MessageTagWhereInput
}

input MessageTagUpdateInput {
  tag: String
  messages: MessageUpdateManyWithoutTagsInput
}

input MessageTagUpdateManyDataInput {
  tag: String
}

input MessageTagUpdateManyMutationInput {
  tag: String
}

input MessageTagUpdateManyWithoutMessagesInput {
  create: [MessageTagCreateWithoutMessagesInput!]
  connect: [MessageTagWhereUniqueInput!]
  set: [MessageTagWhereUniqueInput!]
  disconnect: [MessageTagWhereUniqueInput!]
  delete: [MessageTagWhereUniqueInput!]
  update: [MessageTagUpdateWithWhereUniqueWithoutMessagesInput!]
  updateMany: [MessageTagUpdateManyWithWhereNestedInput!]
  deleteMany: [MessageTagScalarWhereInput!]
  upsert: [MessageTagUpsertWithWhereUniqueWithoutMessagesInput!]
}

input MessageTagUpdateManyWithWhereNestedInput {
  where: MessageTagScalarWhereInput!
  data: MessageTagUpdateManyDataInput!
}

input MessageTagUpdateWithoutMessagesDataInput {
  tag: String
}

input MessageTagUpdateWithWhereUniqueWithoutMessagesInput {
  where: MessageTagWhereUniqueInput!
  data: MessageTagUpdateWithoutMessagesDataInput!
}

input MessageTagUpsertWithWhereUniqueWithoutMessagesInput {
  where: MessageTagWhereUniqueInput!
  update: MessageTagUpdateWithoutMessagesDataInput!
  create: MessageTagCreateWithoutMessagesInput!
}

input MessageTagWhereInput {
  """Logical AND on all given filters."""
  AND: [MessageTagWhereInput!]

  """Logical OR on all given filters."""
  OR: [MessageTagWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [MessageTagWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  tag: String

  """All values that are not equal to given value."""
  tag_not: String

  """All values that are contained in given list."""
  tag_in: [String!]

  """All values that are not contained in given list."""
  tag_not_in: [String!]

  """All values less than the given value."""
  tag_lt: String

  """All values less than or equal the given value."""
  tag_lte: String

  """All values greater than the given value."""
  tag_gt: String

  """All values greater than or equal the given value."""
  tag_gte: String

  """All values containing the given string."""
  tag_contains: String

  """All values not containing the given string."""
  tag_not_contains: String

  """All values starting with the given string."""
  tag_starts_with: String

  """All values not starting with the given string."""
  tag_not_starts_with: String

  """All values ending with the given string."""
  tag_ends_with: String

  """All values not ending with the given string."""
  tag_not_ends_with: String
  messages_every: MessageWhereInput
  messages_some: MessageWhereInput
  messages_none: MessageWhereInput
}

input MessageTagWhereUniqueInput {
  id: ID
}

input MessageUpdateDataInput {
  title: String
  text: String
  author: EmployeeUpdateOneRequiredWithoutCreatedMessagesInput
  parent: MessageUpdateOneInput
  taggedEmployees: EmployeeUpdateManyWithoutTaggedMessagesInput
  tags: MessageTagUpdateManyWithoutMessagesInput
  comments: MessageUpdateManyInput
}

input MessageUpdateInput {
  title: String
  text: String
  author: EmployeeUpdateOneRequiredWithoutCreatedMessagesInput
  parent: MessageUpdateOneInput
  taggedEmployees: EmployeeUpdateManyWithoutTaggedMessagesInput
  tags: MessageTagUpdateManyWithoutMessagesInput
  comments: MessageUpdateManyInput
}

input MessageUpdateManyDataInput {
  title: String
  text: String
}

input MessageUpdateManyInput {
  create: [MessageCreateInput!]
  connect: [MessageWhereUniqueInput!]
  set: [MessageWhereUniqueInput!]
  disconnect: [MessageWhereUniqueInput!]
  delete: [MessageWhereUniqueInput!]
  update: [MessageUpdateWithWhereUniqueNestedInput!]
  updateMany: [MessageUpdateManyWithWhereNestedInput!]
  deleteMany: [MessageScalarWhereInput!]
  upsert: [MessageUpsertWithWhereUniqueNestedInput!]
}

input MessageUpdateManyMutationInput {
  title: String
  text: String
}

input MessageUpdateManyWithoutAuthorInput {
  create: [MessageCreateWithoutAuthorInput!]
  connect: [MessageWhereUniqueInput!]
  set: [MessageWhereUniqueInput!]
  disconnect: [MessageWhereUniqueInput!]
  delete: [MessageWhereUniqueInput!]
  update: [MessageUpdateWithWhereUniqueWithoutAuthorInput!]
  updateMany: [MessageUpdateManyWithWhereNestedInput!]
  deleteMany: [MessageScalarWhereInput!]
  upsert: [MessageUpsertWithWhereUniqueWithoutAuthorInput!]
}

input MessageUpdateManyWithoutTaggedEmployeesInput {
  create: [MessageCreateWithoutTaggedEmployeesInput!]
  connect: [MessageWhereUniqueInput!]
  set: [MessageWhereUniqueInput!]
  disconnect: [MessageWhereUniqueInput!]
  delete: [MessageWhereUniqueInput!]
  update: [MessageUpdateWithWhereUniqueWithoutTaggedEmployeesInput!]
  updateMany: [MessageUpdateManyWithWhereNestedInput!]
  deleteMany: [MessageScalarWhereInput!]
  upsert: [MessageUpsertWithWhereUniqueWithoutTaggedEmployeesInput!]
}

input MessageUpdateManyWithoutTagsInput {
  create: [MessageCreateWithoutTagsInput!]
  connect: [MessageWhereUniqueInput!]
  set: [MessageWhereUniqueInput!]
  disconnect: [MessageWhereUniqueInput!]
  delete: [MessageWhereUniqueInput!]
  update: [MessageUpdateWithWhereUniqueWithoutTagsInput!]
  updateMany: [MessageUpdateManyWithWhereNestedInput!]
  deleteMany: [MessageScalarWhereInput!]
  upsert: [MessageUpsertWithWhereUniqueWithoutTagsInput!]
}

input MessageUpdateManyWithWhereNestedInput {
  where: MessageScalarWhereInput!
  data: MessageUpdateManyDataInput!
}

input MessageUpdateOneInput {
  create: MessageCreateInput
  connect: MessageWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: MessageUpdateDataInput
  upsert: MessageUpsertNestedInput
}

input MessageUpdateWithoutAuthorDataInput {
  title: String
  text: String
  parent: MessageUpdateOneInput
  taggedEmployees: EmployeeUpdateManyWithoutTaggedMessagesInput
  tags: MessageTagUpdateManyWithoutMessagesInput
  comments: MessageUpdateManyInput
}

input MessageUpdateWithoutTaggedEmployeesDataInput {
  title: String
  text: String
  author: EmployeeUpdateOneRequiredWithoutCreatedMessagesInput
  parent: MessageUpdateOneInput
  tags: MessageTagUpdateManyWithoutMessagesInput
  comments: MessageUpdateManyInput
}

input MessageUpdateWithoutTagsDataInput {
  title: String
  text: String
  author: EmployeeUpdateOneRequiredWithoutCreatedMessagesInput
  parent: MessageUpdateOneInput
  taggedEmployees: EmployeeUpdateManyWithoutTaggedMessagesInput
  comments: MessageUpdateManyInput
}

input MessageUpdateWithWhereUniqueNestedInput {
  where: MessageWhereUniqueInput!
  data: MessageUpdateDataInput!
}

input MessageUpdateWithWhereUniqueWithoutAuthorInput {
  where: MessageWhereUniqueInput!
  data: MessageUpdateWithoutAuthorDataInput!
}

input MessageUpdateWithWhereUniqueWithoutTaggedEmployeesInput {
  where: MessageWhereUniqueInput!
  data: MessageUpdateWithoutTaggedEmployeesDataInput!
}

input MessageUpdateWithWhereUniqueWithoutTagsInput {
  where: MessageWhereUniqueInput!
  data: MessageUpdateWithoutTagsDataInput!
}

input MessageUpsertNestedInput {
  update: MessageUpdateDataInput!
  create: MessageCreateInput!
}

input MessageUpsertWithWhereUniqueNestedInput {
  where: MessageWhereUniqueInput!
  update: MessageUpdateDataInput!
  create: MessageCreateInput!
}

input MessageUpsertWithWhereUniqueWithoutAuthorInput {
  where: MessageWhereUniqueInput!
  update: MessageUpdateWithoutAuthorDataInput!
  create: MessageCreateWithoutAuthorInput!
}

input MessageUpsertWithWhereUniqueWithoutTaggedEmployeesInput {
  where: MessageWhereUniqueInput!
  update: MessageUpdateWithoutTaggedEmployeesDataInput!
  create: MessageCreateWithoutTaggedEmployeesInput!
}

input MessageUpsertWithWhereUniqueWithoutTagsInput {
  where: MessageWhereUniqueInput!
  update: MessageUpdateWithoutTagsDataInput!
  create: MessageCreateWithoutTagsInput!
}

input MessageWhereInput {
  """Logical AND on all given filters."""
  AND: [MessageWhereInput!]

  """Logical OR on all given filters."""
  OR: [MessageWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [MessageWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  text: String

  """All values that are not equal to given value."""
  text_not: String

  """All values that are contained in given list."""
  text_in: [String!]

  """All values that are not contained in given list."""
  text_not_in: [String!]

  """All values less than the given value."""
  text_lt: String

  """All values less than or equal the given value."""
  text_lte: String

  """All values greater than the given value."""
  text_gt: String

  """All values greater than or equal the given value."""
  text_gte: String

  """All values containing the given string."""
  text_contains: String

  """All values not containing the given string."""
  text_not_contains: String

  """All values starting with the given string."""
  text_starts_with: String

  """All values not starting with the given string."""
  text_not_starts_with: String

  """All values ending with the given string."""
  text_ends_with: String

  """All values not ending with the given string."""
  text_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  author: EmployeeWhereInput
  parent: MessageWhereInput
  taggedEmployees_every: EmployeeWhereInput
  taggedEmployees_some: EmployeeWhereInput
  taggedEmployees_none: EmployeeWhereInput
  tags_every: MessageTagWhereInput
  tags_some: MessageTagWhereInput
  tags_none: MessageTagWhereInput
  comments_every: MessageWhereInput
  comments_some: MessageWhereInput
  comments_none: MessageWhereInput
}

input MessageWhereUniqueInput {
  id: ID
}

type Mutation {
  createClient(data: ClientCreateInput!): Client!
  createEmployee(data: EmployeeCreateInput!): Employee!
  createMessageTag(data: MessageTagCreateInput!): MessageTag!
  createMedicalCondition(data: MedicalConditionCreateInput!): MedicalCondition!
  createClass(data: ClassCreateInput!): Class!
  createLesson(data: LessonCreateInput!): Lesson!
  createStudent(data: StudentCreateInput!): Student!
  createMessage(data: MessageCreateInput!): Message!
  createAgeGroup(data: AgeGroupCreateInput!): AgeGroup!
  updateClient(data: ClientUpdateInput!, where: ClientWhereUniqueInput!): Client
  updateEmployee(data: EmployeeUpdateInput!, where: EmployeeWhereUniqueInput!): Employee
  updateMessageTag(data: MessageTagUpdateInput!, where: MessageTagWhereUniqueInput!): MessageTag
  updateMedicalCondition(data: MedicalConditionUpdateInput!, where: MedicalConditionWhereUniqueInput!): MedicalCondition
  updateClass(data: ClassUpdateInput!, where: ClassWhereUniqueInput!): Class
  updateLesson(data: LessonUpdateInput!, where: LessonWhereUniqueInput!): Lesson
  updateStudent(data: StudentUpdateInput!, where: StudentWhereUniqueInput!): Student
  updateMessage(data: MessageUpdateInput!, where: MessageWhereUniqueInput!): Message
  updateAgeGroup(data: AgeGroupUpdateInput!, where: AgeGroupWhereUniqueInput!): AgeGroup
  deleteClient(where: ClientWhereUniqueInput!): Client
  deleteEmployee(where: EmployeeWhereUniqueInput!): Employee
  deleteMessageTag(where: MessageTagWhereUniqueInput!): MessageTag
  deleteMedicalCondition(where: MedicalConditionWhereUniqueInput!): MedicalCondition
  deleteClass(where: ClassWhereUniqueInput!): Class
  deleteLesson(where: LessonWhereUniqueInput!): Lesson
  deleteStudent(where: StudentWhereUniqueInput!): Student
  deleteMessage(where: MessageWhereUniqueInput!): Message
  deleteAgeGroup(where: AgeGroupWhereUniqueInput!): AgeGroup
  upsertClient(where: ClientWhereUniqueInput!, create: ClientCreateInput!, update: ClientUpdateInput!): Client!
  upsertEmployee(where: EmployeeWhereUniqueInput!, create: EmployeeCreateInput!, update: EmployeeUpdateInput!): Employee!
  upsertMessageTag(where: MessageTagWhereUniqueInput!, create: MessageTagCreateInput!, update: MessageTagUpdateInput!): MessageTag!
  upsertMedicalCondition(where: MedicalConditionWhereUniqueInput!, create: MedicalConditionCreateInput!, update: MedicalConditionUpdateInput!): MedicalCondition!
  upsertClass(where: ClassWhereUniqueInput!, create: ClassCreateInput!, update: ClassUpdateInput!): Class!
  upsertLesson(where: LessonWhereUniqueInput!, create: LessonCreateInput!, update: LessonUpdateInput!): Lesson!
  upsertStudent(where: StudentWhereUniqueInput!, create: StudentCreateInput!, update: StudentUpdateInput!): Student!
  upsertMessage(where: MessageWhereUniqueInput!, create: MessageCreateInput!, update: MessageUpdateInput!): Message!
  upsertAgeGroup(where: AgeGroupWhereUniqueInput!, create: AgeGroupCreateInput!, update: AgeGroupUpdateInput!): AgeGroup!
  updateManyClients(data: ClientUpdateManyMutationInput!, where: ClientWhereInput): BatchPayload!
  updateManyEmployees(data: EmployeeUpdateManyMutationInput!, where: EmployeeWhereInput): BatchPayload!
  updateManyMessageTags(data: MessageTagUpdateManyMutationInput!, where: MessageTagWhereInput): BatchPayload!
  updateManyMedicalConditions(data: MedicalConditionUpdateManyMutationInput!, where: MedicalConditionWhereInput): BatchPayload!
  updateManyClasses(data: ClassUpdateManyMutationInput!, where: ClassWhereInput): BatchPayload!
  updateManyLessons(data: LessonUpdateManyMutationInput!, where: LessonWhereInput): BatchPayload!
  updateManyStudents(data: StudentUpdateManyMutationInput!, where: StudentWhereInput): BatchPayload!
  updateManyMessages(data: MessageUpdateManyMutationInput!, where: MessageWhereInput): BatchPayload!
  updateManyAgeGroups(data: AgeGroupUpdateManyMutationInput!, where: AgeGroupWhereInput): BatchPayload!
  deleteManyClients(where: ClientWhereInput): BatchPayload!
  deleteManyEmployees(where: EmployeeWhereInput): BatchPayload!
  deleteManyMessageTags(where: MessageTagWhereInput): BatchPayload!
  deleteManyMedicalConditions(where: MedicalConditionWhereInput): BatchPayload!
  deleteManyClasses(where: ClassWhereInput): BatchPayload!
  deleteManyLessons(where: LessonWhereInput): BatchPayload!
  deleteManyStudents(where: StudentWhereInput): BatchPayload!
  deleteManyMessages(where: MessageWhereInput): BatchPayload!
  deleteManyAgeGroups(where: AgeGroupWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Query {
  clients(where: ClientWhereInput, orderBy: ClientOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Client]!
  employees(where: EmployeeWhereInput, orderBy: EmployeeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Employee]!
  messageTags(where: MessageTagWhereInput, orderBy: MessageTagOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [MessageTag]!
  medicalConditions(where: MedicalConditionWhereInput, orderBy: MedicalConditionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [MedicalCondition]!
  classes(where: ClassWhereInput, orderBy: ClassOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Class]!
  lessons(where: LessonWhereInput, orderBy: LessonOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Lesson]!
  students(where: StudentWhereInput, orderBy: StudentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Student]!
  messages(where: MessageWhereInput, orderBy: MessageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Message]!
  ageGroups(where: AgeGroupWhereInput, orderBy: AgeGroupOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [AgeGroup]!
  client(where: ClientWhereUniqueInput!): Client
  employee(where: EmployeeWhereUniqueInput!): Employee
  messageTag(where: MessageTagWhereUniqueInput!): MessageTag
  medicalCondition(where: MedicalConditionWhereUniqueInput!): MedicalCondition
  class(where: ClassWhereUniqueInput!): Class
  lesson(where: LessonWhereUniqueInput!): Lesson
  student(where: StudentWhereUniqueInput!): Student
  message(where: MessageWhereUniqueInput!): Message
  ageGroup(where: AgeGroupWhereUniqueInput!): AgeGroup
  clientsConnection(where: ClientWhereInput, orderBy: ClientOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ClientConnection!
  employeesConnection(where: EmployeeWhereInput, orderBy: EmployeeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): EmployeeConnection!
  messageTagsConnection(where: MessageTagWhereInput, orderBy: MessageTagOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): MessageTagConnection!
  medicalConditionsConnection(where: MedicalConditionWhereInput, orderBy: MedicalConditionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): MedicalConditionConnection!
  classesConnection(where: ClassWhereInput, orderBy: ClassOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ClassConnection!
  lessonsConnection(where: LessonWhereInput, orderBy: LessonOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): LessonConnection!
  studentsConnection(where: StudentWhereInput, orderBy: StudentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): StudentConnection!
  messagesConnection(where: MessageWhereInput, orderBy: MessageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): MessageConnection!
  ageGroupsConnection(where: AgeGroupWhereInput, orderBy: AgeGroupOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): AgeGroupConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

enum Role {
  ADMIN
  INSTRUCTOR
  FRONT_DESK
}

enum SkillLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

type Student implements Node {
  id: ID!
  firstName: String!
  lastName: String!
  birthday: String!
  skill: SkillLevel!
  ageGroup: AgeGroup!
  classes(where: ClassWhereInput, orderBy: ClassOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Class!]
  lessons(where: LessonWhereInput, orderBy: LessonOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Lesson!]
  gender: Gender!
  medical(where: MedicalConditionWhereInput, orderBy: MedicalConditionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [MedicalCondition!]
  admin: Client
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type StudentConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [StudentEdge]!
  aggregate: AggregateStudent!
}

input StudentCreateInput {
  id: ID
  firstName: String!
  lastName: String!
  birthday: String!
  skill: SkillLevel!
  gender: Gender!
  ageGroup: AgeGroupCreateOneInput!
  classes: ClassCreateManyWithoutStudentsInput
  lessons: LessonCreateManyWithoutClientInput
  medical: MedicalConditionCreateManyWithoutStudentInput
  admin: ClientCreateOneWithoutStudentsInput
}

input StudentCreateManyInput {
  create: [StudentCreateInput!]
  connect: [StudentWhereUniqueInput!]
}

input StudentCreateManyWithoutAdminInput {
  create: [StudentCreateWithoutAdminInput!]
  connect: [StudentWhereUniqueInput!]
}

input StudentCreateManyWithoutClassesInput {
  create: [StudentCreateWithoutClassesInput!]
  connect: [StudentWhereUniqueInput!]
}

input StudentCreateManyWithoutLessonsInput {
  create: [StudentCreateWithoutLessonsInput!]
  connect: [StudentWhereUniqueInput!]
}

input StudentCreateOneWithoutMedicalInput {
  create: StudentCreateWithoutMedicalInput
  connect: StudentWhereUniqueInput
}

input StudentCreateWithoutAdminInput {
  id: ID
  firstName: String!
  lastName: String!
  birthday: String!
  skill: SkillLevel!
  gender: Gender!
  ageGroup: AgeGroupCreateOneInput!
  classes: ClassCreateManyWithoutStudentsInput
  lessons: LessonCreateManyWithoutClientInput
  medical: MedicalConditionCreateManyWithoutStudentInput
}

input StudentCreateWithoutClassesInput {
  id: ID
  firstName: String!
  lastName: String!
  birthday: String!
  skill: SkillLevel!
  gender: Gender!
  ageGroup: AgeGroupCreateOneInput!
  lessons: LessonCreateManyWithoutClientInput
  medical: MedicalConditionCreateManyWithoutStudentInput
  admin: ClientCreateOneWithoutStudentsInput
}

input StudentCreateWithoutLessonsInput {
  id: ID
  firstName: String!
  lastName: String!
  birthday: String!
  skill: SkillLevel!
  gender: Gender!
  ageGroup: AgeGroupCreateOneInput!
  classes: ClassCreateManyWithoutStudentsInput
  medical: MedicalConditionCreateManyWithoutStudentInput
  admin: ClientCreateOneWithoutStudentsInput
}

input StudentCreateWithoutMedicalInput {
  id: ID
  firstName: String!
  lastName: String!
  birthday: String!
  skill: SkillLevel!
  gender: Gender!
  ageGroup: AgeGroupCreateOneInput!
  classes: ClassCreateManyWithoutStudentsInput
  lessons: LessonCreateManyWithoutClientInput
  admin: ClientCreateOneWithoutStudentsInput
}

"""An edge in a connection."""
type StudentEdge {
  """The item at the end of the edge."""
  node: Student!

  """A cursor for use in pagination."""
  cursor: String!
}

enum StudentOrderByInput {
  id_ASC
  id_DESC
  firstName_ASC
  firstName_DESC
  lastName_ASC
  lastName_DESC
  birthday_ASC
  birthday_DESC
  skill_ASC
  skill_DESC
  gender_ASC
  gender_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type StudentPreviousValues {
  id: ID!
  firstName: String!
  lastName: String!
  birthday: String!
  skill: SkillLevel!
  gender: Gender!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input StudentScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [StudentScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [StudentScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [StudentScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  firstName: String

  """All values that are not equal to given value."""
  firstName_not: String

  """All values that are contained in given list."""
  firstName_in: [String!]

  """All values that are not contained in given list."""
  firstName_not_in: [String!]

  """All values less than the given value."""
  firstName_lt: String

  """All values less than or equal the given value."""
  firstName_lte: String

  """All values greater than the given value."""
  firstName_gt: String

  """All values greater than or equal the given value."""
  firstName_gte: String

  """All values containing the given string."""
  firstName_contains: String

  """All values not containing the given string."""
  firstName_not_contains: String

  """All values starting with the given string."""
  firstName_starts_with: String

  """All values not starting with the given string."""
  firstName_not_starts_with: String

  """All values ending with the given string."""
  firstName_ends_with: String

  """All values not ending with the given string."""
  firstName_not_ends_with: String
  lastName: String

  """All values that are not equal to given value."""
  lastName_not: String

  """All values that are contained in given list."""
  lastName_in: [String!]

  """All values that are not contained in given list."""
  lastName_not_in: [String!]

  """All values less than the given value."""
  lastName_lt: String

  """All values less than or equal the given value."""
  lastName_lte: String

  """All values greater than the given value."""
  lastName_gt: String

  """All values greater than or equal the given value."""
  lastName_gte: String

  """All values containing the given string."""
  lastName_contains: String

  """All values not containing the given string."""
  lastName_not_contains: String

  """All values starting with the given string."""
  lastName_starts_with: String

  """All values not starting with the given string."""
  lastName_not_starts_with: String

  """All values ending with the given string."""
  lastName_ends_with: String

  """All values not ending with the given string."""
  lastName_not_ends_with: String
  birthday: String

  """All values that are not equal to given value."""
  birthday_not: String

  """All values that are contained in given list."""
  birthday_in: [String!]

  """All values that are not contained in given list."""
  birthday_not_in: [String!]

  """All values less than the given value."""
  birthday_lt: String

  """All values less than or equal the given value."""
  birthday_lte: String

  """All values greater than the given value."""
  birthday_gt: String

  """All values greater than or equal the given value."""
  birthday_gte: String

  """All values containing the given string."""
  birthday_contains: String

  """All values not containing the given string."""
  birthday_not_contains: String

  """All values starting with the given string."""
  birthday_starts_with: String

  """All values not starting with the given string."""
  birthday_not_starts_with: String

  """All values ending with the given string."""
  birthday_ends_with: String

  """All values not ending with the given string."""
  birthday_not_ends_with: String
  skill: SkillLevel

  """All values that are not equal to given value."""
  skill_not: SkillLevel

  """All values that are contained in given list."""
  skill_in: [SkillLevel!]

  """All values that are not contained in given list."""
  skill_not_in: [SkillLevel!]
  gender: Gender

  """All values that are not equal to given value."""
  gender_not: Gender

  """All values that are contained in given list."""
  gender_in: [Gender!]

  """All values that are not contained in given list."""
  gender_not_in: [Gender!]
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

type StudentSubscriptionPayload {
  mutation: MutationType!
  node: Student
  updatedFields: [String!]
  previousValues: StudentPreviousValues
}

input StudentSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [StudentSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [StudentSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [StudentSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: StudentWhereInput
}

input StudentUpdateDataInput {
  firstName: String
  lastName: String
  birthday: String
  skill: SkillLevel
  gender: Gender
  ageGroup: AgeGroupUpdateOneRequiredInput
  classes: ClassUpdateManyWithoutStudentsInput
  lessons: LessonUpdateManyWithoutClientInput
  medical: MedicalConditionUpdateManyWithoutStudentInput
  admin: ClientUpdateOneWithoutStudentsInput
}

input StudentUpdateInput {
  firstName: String
  lastName: String
  birthday: String
  skill: SkillLevel
  gender: Gender
  ageGroup: AgeGroupUpdateOneRequiredInput
  classes: ClassUpdateManyWithoutStudentsInput
  lessons: LessonUpdateManyWithoutClientInput
  medical: MedicalConditionUpdateManyWithoutStudentInput
  admin: ClientUpdateOneWithoutStudentsInput
}

input StudentUpdateManyDataInput {
  firstName: String
  lastName: String
  birthday: String
  skill: SkillLevel
  gender: Gender
}

input StudentUpdateManyInput {
  create: [StudentCreateInput!]
  connect: [StudentWhereUniqueInput!]
  set: [StudentWhereUniqueInput!]
  disconnect: [StudentWhereUniqueInput!]
  delete: [StudentWhereUniqueInput!]
  update: [StudentUpdateWithWhereUniqueNestedInput!]
  updateMany: [StudentUpdateManyWithWhereNestedInput!]
  deleteMany: [StudentScalarWhereInput!]
  upsert: [StudentUpsertWithWhereUniqueNestedInput!]
}

input StudentUpdateManyMutationInput {
  firstName: String
  lastName: String
  birthday: String
  skill: SkillLevel
  gender: Gender
}

input StudentUpdateManyWithoutAdminInput {
  create: [StudentCreateWithoutAdminInput!]
  connect: [StudentWhereUniqueInput!]
  set: [StudentWhereUniqueInput!]
  disconnect: [StudentWhereUniqueInput!]
  delete: [StudentWhereUniqueInput!]
  update: [StudentUpdateWithWhereUniqueWithoutAdminInput!]
  updateMany: [StudentUpdateManyWithWhereNestedInput!]
  deleteMany: [StudentScalarWhereInput!]
  upsert: [StudentUpsertWithWhereUniqueWithoutAdminInput!]
}

input StudentUpdateManyWithoutClassesInput {
  create: [StudentCreateWithoutClassesInput!]
  connect: [StudentWhereUniqueInput!]
  set: [StudentWhereUniqueInput!]
  disconnect: [StudentWhereUniqueInput!]
  delete: [StudentWhereUniqueInput!]
  update: [StudentUpdateWithWhereUniqueWithoutClassesInput!]
  updateMany: [StudentUpdateManyWithWhereNestedInput!]
  deleteMany: [StudentScalarWhereInput!]
  upsert: [StudentUpsertWithWhereUniqueWithoutClassesInput!]
}

input StudentUpdateManyWithoutLessonsInput {
  create: [StudentCreateWithoutLessonsInput!]
  connect: [StudentWhereUniqueInput!]
  set: [StudentWhereUniqueInput!]
  disconnect: [StudentWhereUniqueInput!]
  delete: [StudentWhereUniqueInput!]
  update: [StudentUpdateWithWhereUniqueWithoutLessonsInput!]
  updateMany: [StudentUpdateManyWithWhereNestedInput!]
  deleteMany: [StudentScalarWhereInput!]
  upsert: [StudentUpsertWithWhereUniqueWithoutLessonsInput!]
}

input StudentUpdateManyWithWhereNestedInput {
  where: StudentScalarWhereInput!
  data: StudentUpdateManyDataInput!
}

input StudentUpdateOneWithoutMedicalInput {
  create: StudentCreateWithoutMedicalInput
  connect: StudentWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: StudentUpdateWithoutMedicalDataInput
  upsert: StudentUpsertWithoutMedicalInput
}

input StudentUpdateWithoutAdminDataInput {
  firstName: String
  lastName: String
  birthday: String
  skill: SkillLevel
  gender: Gender
  ageGroup: AgeGroupUpdateOneRequiredInput
  classes: ClassUpdateManyWithoutStudentsInput
  lessons: LessonUpdateManyWithoutClientInput
  medical: MedicalConditionUpdateManyWithoutStudentInput
}

input StudentUpdateWithoutClassesDataInput {
  firstName: String
  lastName: String
  birthday: String
  skill: SkillLevel
  gender: Gender
  ageGroup: AgeGroupUpdateOneRequiredInput
  lessons: LessonUpdateManyWithoutClientInput
  medical: MedicalConditionUpdateManyWithoutStudentInput
  admin: ClientUpdateOneWithoutStudentsInput
}

input StudentUpdateWithoutLessonsDataInput {
  firstName: String
  lastName: String
  birthday: String
  skill: SkillLevel
  gender: Gender
  ageGroup: AgeGroupUpdateOneRequiredInput
  classes: ClassUpdateManyWithoutStudentsInput
  medical: MedicalConditionUpdateManyWithoutStudentInput
  admin: ClientUpdateOneWithoutStudentsInput
}

input StudentUpdateWithoutMedicalDataInput {
  firstName: String
  lastName: String
  birthday: String
  skill: SkillLevel
  gender: Gender
  ageGroup: AgeGroupUpdateOneRequiredInput
  classes: ClassUpdateManyWithoutStudentsInput
  lessons: LessonUpdateManyWithoutClientInput
  admin: ClientUpdateOneWithoutStudentsInput
}

input StudentUpdateWithWhereUniqueNestedInput {
  where: StudentWhereUniqueInput!
  data: StudentUpdateDataInput!
}

input StudentUpdateWithWhereUniqueWithoutAdminInput {
  where: StudentWhereUniqueInput!
  data: StudentUpdateWithoutAdminDataInput!
}

input StudentUpdateWithWhereUniqueWithoutClassesInput {
  where: StudentWhereUniqueInput!
  data: StudentUpdateWithoutClassesDataInput!
}

input StudentUpdateWithWhereUniqueWithoutLessonsInput {
  where: StudentWhereUniqueInput!
  data: StudentUpdateWithoutLessonsDataInput!
}

input StudentUpsertWithoutMedicalInput {
  update: StudentUpdateWithoutMedicalDataInput!
  create: StudentCreateWithoutMedicalInput!
}

input StudentUpsertWithWhereUniqueNestedInput {
  where: StudentWhereUniqueInput!
  update: StudentUpdateDataInput!
  create: StudentCreateInput!
}

input StudentUpsertWithWhereUniqueWithoutAdminInput {
  where: StudentWhereUniqueInput!
  update: StudentUpdateWithoutAdminDataInput!
  create: StudentCreateWithoutAdminInput!
}

input StudentUpsertWithWhereUniqueWithoutClassesInput {
  where: StudentWhereUniqueInput!
  update: StudentUpdateWithoutClassesDataInput!
  create: StudentCreateWithoutClassesInput!
}

input StudentUpsertWithWhereUniqueWithoutLessonsInput {
  where: StudentWhereUniqueInput!
  update: StudentUpdateWithoutLessonsDataInput!
  create: StudentCreateWithoutLessonsInput!
}

input StudentWhereInput {
  """Logical AND on all given filters."""
  AND: [StudentWhereInput!]

  """Logical OR on all given filters."""
  OR: [StudentWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [StudentWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  firstName: String

  """All values that are not equal to given value."""
  firstName_not: String

  """All values that are contained in given list."""
  firstName_in: [String!]

  """All values that are not contained in given list."""
  firstName_not_in: [String!]

  """All values less than the given value."""
  firstName_lt: String

  """All values less than or equal the given value."""
  firstName_lte: String

  """All values greater than the given value."""
  firstName_gt: String

  """All values greater than or equal the given value."""
  firstName_gte: String

  """All values containing the given string."""
  firstName_contains: String

  """All values not containing the given string."""
  firstName_not_contains: String

  """All values starting with the given string."""
  firstName_starts_with: String

  """All values not starting with the given string."""
  firstName_not_starts_with: String

  """All values ending with the given string."""
  firstName_ends_with: String

  """All values not ending with the given string."""
  firstName_not_ends_with: String
  lastName: String

  """All values that are not equal to given value."""
  lastName_not: String

  """All values that are contained in given list."""
  lastName_in: [String!]

  """All values that are not contained in given list."""
  lastName_not_in: [String!]

  """All values less than the given value."""
  lastName_lt: String

  """All values less than or equal the given value."""
  lastName_lte: String

  """All values greater than the given value."""
  lastName_gt: String

  """All values greater than or equal the given value."""
  lastName_gte: String

  """All values containing the given string."""
  lastName_contains: String

  """All values not containing the given string."""
  lastName_not_contains: String

  """All values starting with the given string."""
  lastName_starts_with: String

  """All values not starting with the given string."""
  lastName_not_starts_with: String

  """All values ending with the given string."""
  lastName_ends_with: String

  """All values not ending with the given string."""
  lastName_not_ends_with: String
  birthday: String

  """All values that are not equal to given value."""
  birthday_not: String

  """All values that are contained in given list."""
  birthday_in: [String!]

  """All values that are not contained in given list."""
  birthday_not_in: [String!]

  """All values less than the given value."""
  birthday_lt: String

  """All values less than or equal the given value."""
  birthday_lte: String

  """All values greater than the given value."""
  birthday_gt: String

  """All values greater than or equal the given value."""
  birthday_gte: String

  """All values containing the given string."""
  birthday_contains: String

  """All values not containing the given string."""
  birthday_not_contains: String

  """All values starting with the given string."""
  birthday_starts_with: String

  """All values not starting with the given string."""
  birthday_not_starts_with: String

  """All values ending with the given string."""
  birthday_ends_with: String

  """All values not ending with the given string."""
  birthday_not_ends_with: String
  skill: SkillLevel

  """All values that are not equal to given value."""
  skill_not: SkillLevel

  """All values that are contained in given list."""
  skill_in: [SkillLevel!]

  """All values that are not contained in given list."""
  skill_not_in: [SkillLevel!]
  gender: Gender

  """All values that are not equal to given value."""
  gender_not: Gender

  """All values that are contained in given list."""
  gender_in: [Gender!]

  """All values that are not contained in given list."""
  gender_not_in: [Gender!]
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  ageGroup: AgeGroupWhereInput
  classes_every: ClassWhereInput
  classes_some: ClassWhereInput
  classes_none: ClassWhereInput
  lessons_every: LessonWhereInput
  lessons_some: LessonWhereInput
  lessons_none: LessonWhereInput
  medical_every: MedicalConditionWhereInput
  medical_some: MedicalConditionWhereInput
  medical_none: MedicalConditionWhereInput
  admin: ClientWhereInput
}

input StudentWhereUniqueInput {
  id: ID
}

type Subscription {
  client(where: ClientSubscriptionWhereInput): ClientSubscriptionPayload
  employee(where: EmployeeSubscriptionWhereInput): EmployeeSubscriptionPayload
  messageTag(where: MessageTagSubscriptionWhereInput): MessageTagSubscriptionPayload
  medicalCondition(where: MedicalConditionSubscriptionWhereInput): MedicalConditionSubscriptionPayload
  class(where: ClassSubscriptionWhereInput): ClassSubscriptionPayload
  lesson(where: LessonSubscriptionWhereInput): LessonSubscriptionPayload
  student(where: StudentSubscriptionWhereInput): StudentSubscriptionPayload
  message(where: MessageSubscriptionWhereInput): MessageSubscriptionPayload
  ageGroup(where: AgeGroupSubscriptionWhereInput): AgeGroupSubscriptionPayload
}
