enum Gender {
	MALE
	FEMALE
	OTHER
}

enum Role {
	ADMIN
	INSTRUCTOR
	FRONT_DESK
}

enum SkillLevel {
	BEGINNER
	INTERMEDIATE
	ADVANCED
}

enum LessonType {
	SINGLE
	PAIR
}

enum Day {
	SUNDAY
	MONDAY
	TUESDAY
	WEDNESDAY
	THURSDAY
	FRIDAY
	SATURDAY
}

type Student {
	id: ID! @id
	firstName: String!
	lastName: String!
	birthday: String!
	skill: SkillLevel!
	ageGroup: AgeGroup!
	classes: [Class!]!
	lessons: [Lesson!]!
	gender: Gender!
	medical: [MedicalCondition!]!
	admin: Client @relation(link: INLINE)
	createdAt: DateTime! @createdAt
	updatedAt: DateTime! @updatedAt
}

type Client {
	id: ID! @id
	email: String! @unique
	password: String!
	firstName: String!
	lastName: String!
	phone: String!
	address: String!
	city: String!
	state: String!
	zip: Int!
	students: [Student!]!
	stripeId: String
	resetToken: String
	resetTokenExpiry: String
	createdAt: DateTime! @createdAt
	updatedAt: DateTime! @updatedAt
}

type Employee {
	id: ID! @id
	email: String! @unique
	password: String!
	phone: String! @unique
	firstName: String!
	lastName: String!
	gender: Gender!
	address: String!
	city: String!
	state: String!
	zip: Int!
	bio: String!
	role: [Role] @scalarList(strategy: RELATION)
	imageURL: String!
	startDate: DateTime!
	currentEmployee: Boolean! @default(value: true)
	clients: [Student!]!
	classes: [Class!]!
	lessons: [Lesson!]!
	lessonSinglePrice: Int
	lessonDoublePrice: Int
	createdMessages: [Message!]! @relation(link: TABLE, name: "MessageAuthorRelation")
	taggedMessages: [Message!]! @relation(link: TABLE, name: "TaggedRelation")
	createdAt: DateTime! @createdAt
	updatedAt: DateTime! @updatedAt
}

type Message {
	id: ID! @id
	title: String!
	text: String!
	author: Employee! @relation(name: "MessageAuthorRelation")
	parent: Message @relation(name: "ParentMessageRelation")
	taggedEmployees: [Employee!]! @relation(name: "TaggedRelation")
	tags: [MessageTag!]!
	comments: [Message!]! @relation(name: "CommentsRelation")
	createdAt: DateTime! @createdAt
	updatedAt: DateTime! @updatedAt
}

type MessageTag {
	id: ID! @id 
	tag: String!
	messages: [Message!]!
}

type MedicalCondition {
	id: ID! @id
	description: String!
	student: Student @relation(type: "StudentMedical")
	createdAt: DateTime! @createdAt
	updatedAt: DateTime! @updatedAt
}

type Class {
	id: ID! @id
	name: String
	description: String!
	ageGroup: AgeGroup!
	level: SkillLevel!
	capacity: Int!
	price: Int!
	day: Day!
	instructor: Employee!
	duration: Int!
	students: [Student!]!
	time: String!
	createdAt: DateTime! @createdAt
	updatedAt: DateTime! @updatedAt
}

type Lesson {
	id: ID! @id
	instructor: Employee!
	client: [Student!]!
	duration: Int!
	type: LessonType
	day: Day!
	time: String!
	open: Boolean!
}

type AgeGroup {
	id: ID! @id
	name: String!
	minAge: Int!
	maxAge: Int
	createdAt: DateTime! @createdAt
	updatedAt: DateTime! @updatedAt
}

union User = Client | Student | Employee
union Customer = Client | Student # makes it so we can find Parents/Children in one single query
union Instruction = Lesson | Class # we can search for all classes and lessons in one query instead of two
